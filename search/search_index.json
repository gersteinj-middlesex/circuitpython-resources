{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CircuitPython Resources Instead of giving you a lot of different files or handouts, I'm creating a basic documentation site where you can find all my resources for you. This will be undergoing a lot of growth as I build it, but you'll be able to use this as a resource while you do work in my class. Please be aware that if you ask me for help with somethign that's already detailed in here, I may tell you to go read the documentation. For anything you want more info on, please let me know and I'll be happy to add it here if relevant, even if I hadn't originally planned on including it. Using This Resource On the left, you'll find a menu with the different categories you can find help for. On the right, you'll find a table of contents for the specific page you're on. I've created a glossary, and whenever you see a term that has a definition in the glossary, you'll see it lightly underlined like IDE . Move your cursor over the word and a definition will pop up.","title":"Home"},{"location":"#circuitpython-resources","text":"Instead of giving you a lot of different files or handouts, I'm creating a basic documentation site where you can find all my resources for you. This will be undergoing a lot of growth as I build it, but you'll be able to use this as a resource while you do work in my class. Please be aware that if you ask me for help with somethign that's already detailed in here, I may tell you to go read the documentation. For anything you want more info on, please let me know and I'll be happy to add it here if relevant, even if I hadn't originally planned on including it.","title":"CircuitPython Resources"},{"location":"#using-this-resource","text":"On the left, you'll find a menu with the different categories you can find help for. On the right, you'll find a table of contents for the specific page you're on. I've created a glossary, and whenever you see a term that has a definition in the glossary, you'll see it lightly underlined like IDE . Move your cursor over the word and a definition will pop up.","title":"Using This Resource"},{"location":"board/","text":"Troubleshooting Reinstalling/Updating CircuitPython Warning This is not something you'll need to do every time you work with the board. In class, you should only do this if told to do so. Everything on the board will be erased, so make sure you've saved everything you want to keep! Sometimes we need to update or reinstall CircuitPython. This is a lot like doing a factory reset on your phone when things aren't working right. Download the correct version of CircuitPython . Make sure you choose the correct board. The name of the board is written on the board itself. Plug your board into the computer with a USB cable you know works. It should show up in the filesystem as CIRCUITPY or another similar name. Double click the reset button. The CIRCUITPY drive will go away and be replaced by a drive called ITSYBOOT , CPLAYBOOT , or something similar. Different boards will show up with different names, but the important thing is it will always include the word BOOT . This puts your board into boot mode so you can install CircuitPython. It's a lot like putting your phone into rescue mode to do a factory reset, and like rescue mode, is something you won't do most of the time. Boards that have an RGB indicator light and a regular built in LED will have the built in LED light up red and the RGB indicator light up in bright green. Drag the .uf2 file you downloaded in step one into the ITSYBOOT (or whatever it's called) drive. The boot drive will go away as the board restarts. It will return as CIRCUITPY . Your board is ready to use.","title":"Troubleshooting"},{"location":"board/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"board/#reinstallingupdating-circuitpython","text":"Warning This is not something you'll need to do every time you work with the board. In class, you should only do this if told to do so. Everything on the board will be erased, so make sure you've saved everything you want to keep! Sometimes we need to update or reinstall CircuitPython. This is a lot like doing a factory reset on your phone when things aren't working right. Download the correct version of CircuitPython . Make sure you choose the correct board. The name of the board is written on the board itself. Plug your board into the computer with a USB cable you know works. It should show up in the filesystem as CIRCUITPY or another similar name. Double click the reset button. The CIRCUITPY drive will go away and be replaced by a drive called ITSYBOOT , CPLAYBOOT , or something similar. Different boards will show up with different names, but the important thing is it will always include the word BOOT . This puts your board into boot mode so you can install CircuitPython. It's a lot like putting your phone into rescue mode to do a factory reset, and like rescue mode, is something you won't do most of the time. Boards that have an RGB indicator light and a regular built in LED will have the built in LED light up red and the RGB indicator light up in bright green. Drag the .uf2 file you downloaded in step one into the ITSYBOOT (or whatever it's called) drive. The boot drive will go away as the board restarts. It will return as CIRCUITPY . Your board is ready to use.","title":"Reinstalling/Updating CircuitPython"},{"location":"getting-started/","text":"Getting Started Every Time You Use The Board What You Need A development board. For right now, we're using the Adafruit ItsyBity M0 Express, but there are lots of options A suitable USB cable. All the boards we have at the school use a micro-USB cable. If you're using your own cable, make sure that it can be used for data - some USB cables are only for power! A computer to work with. A Chromebook is fine Connecting the Board to the Computer Connect the board to a computer using a USB cable Make sure the board shows up in your computer's file system. It should show up as a removable drive (like plugging in a flash drive) and will usually be called CIRCUITPY Open your development environment. For the Chromebooks, we're using URFDVW's CircuitPython Online IDE . If you want to keep working with this outside of class and you have a computer with a full operating system, there are lots of other options you can use Make a software connection between the board and computer. The online IDE won't work if you do this. To make the connection, click the connect button and select your board At this point, you should be able to enter the REPL or open/edit/save files on the board's internal storage About USB cables Some USB cables can only be used for charging! These cables don't have the necessary wires to send data back and forth, but they don't look any different from a USB cable that does. If the computer doesn't recognize the board, sometimes this is the reason. I will always give you USB cables that can transmit data, but if you're using your own you may run into this problem Connected isn't always connected If you disconnect your board (or put it into boot mode), it will disconnect from the online IDE, but the button in the IDE will still show connected because it doesn't check on its own. If you run into this problem, refresh the page and redo step 4 Interactive Programming with the REPL For this, you'll be working in the serial console. It's the right side of the online IDE As soon as the board starts up, it will run the code.py or main.py file saved on it (if present). After the code is finished running, you should see an output similar to what's below. If you don't, take a look at the box below that for more information about what's happening! 1 2 3 4 ******************************************* Auto-reload is on. Simply save files over USB to run them or enter REPL to disable. Press any key to enter the REPL. Use CTRL-D to reload. Help, I don't see that! Remember how I said that the board will immediately start running the code that's saved on it? The serial console will only be ready for you to load the REPL after the code finishes running, but sometimes you'll have code on your board that has an infinite loop. If that happens, the code will never stop running so it'll never get to that point. You can spot this happening if your code is constantly showing you some output (either printing or doing something on the board itself), or even if the board is connected but you don't see anything - sometimes the code will be doing things you can't see! If this happens to you, force stop the board and you should get the lines above so you can continue on with these directions At this point, you can click in the Command Window and press Enter to open up the REPL. If you're successful, you'll see something similar to the lines below. Your version of CircuitPython and your board may be different from mine, but the >>> is called the command prompt, and it shows that you are in (Circuit)Python and the board is waiting for you to give an input. 1 2 Adafruit CircuitPython 7.1.1 on 2022-01-14; Adafruit ItsyBitsy M0 Express with samd21g18 >>> To make sure everything's working, do that now! I like to type a math expression like 5 * 3 into the command window and press Enter , which should output 15 Opening, Editing, Saving, and Running .py Files With your board connected to the Online IDE, click the Open button and select your file. Now you can edit the file in the Editor window. Each time you click Save and Run , your code will be saved and the board will restart and run the code. Don't forget to use Save As before class ends to save a copy to your computer!","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#every-time-you-use-the-board","text":"","title":"Every Time You Use The Board"},{"location":"getting-started/#what-you-need","text":"A development board. For right now, we're using the Adafruit ItsyBity M0 Express, but there are lots of options A suitable USB cable. All the boards we have at the school use a micro-USB cable. If you're using your own cable, make sure that it can be used for data - some USB cables are only for power! A computer to work with. A Chromebook is fine","title":"What You Need"},{"location":"getting-started/#connecting-the-board-to-the-computer","text":"Connect the board to a computer using a USB cable Make sure the board shows up in your computer's file system. It should show up as a removable drive (like plugging in a flash drive) and will usually be called CIRCUITPY Open your development environment. For the Chromebooks, we're using URFDVW's CircuitPython Online IDE . If you want to keep working with this outside of class and you have a computer with a full operating system, there are lots of other options you can use Make a software connection between the board and computer. The online IDE won't work if you do this. To make the connection, click the connect button and select your board At this point, you should be able to enter the REPL or open/edit/save files on the board's internal storage About USB cables Some USB cables can only be used for charging! These cables don't have the necessary wires to send data back and forth, but they don't look any different from a USB cable that does. If the computer doesn't recognize the board, sometimes this is the reason. I will always give you USB cables that can transmit data, but if you're using your own you may run into this problem Connected isn't always connected If you disconnect your board (or put it into boot mode), it will disconnect from the online IDE, but the button in the IDE will still show connected because it doesn't check on its own. If you run into this problem, refresh the page and redo step 4","title":"Connecting the Board to the Computer"},{"location":"getting-started/#interactive-programming-with-the-repl","text":"For this, you'll be working in the serial console. It's the right side of the online IDE As soon as the board starts up, it will run the code.py or main.py file saved on it (if present). After the code is finished running, you should see an output similar to what's below. If you don't, take a look at the box below that for more information about what's happening! 1 2 3 4 ******************************************* Auto-reload is on. Simply save files over USB to run them or enter REPL to disable. Press any key to enter the REPL. Use CTRL-D to reload. Help, I don't see that! Remember how I said that the board will immediately start running the code that's saved on it? The serial console will only be ready for you to load the REPL after the code finishes running, but sometimes you'll have code on your board that has an infinite loop. If that happens, the code will never stop running so it'll never get to that point. You can spot this happening if your code is constantly showing you some output (either printing or doing something on the board itself), or even if the board is connected but you don't see anything - sometimes the code will be doing things you can't see! If this happens to you, force stop the board and you should get the lines above so you can continue on with these directions At this point, you can click in the Command Window and press Enter to open up the REPL. If you're successful, you'll see something similar to the lines below. Your version of CircuitPython and your board may be different from mine, but the >>> is called the command prompt, and it shows that you are in (Circuit)Python and the board is waiting for you to give an input. 1 2 Adafruit CircuitPython 7.1.1 on 2022-01-14; Adafruit ItsyBitsy M0 Express with samd21g18 >>> To make sure everything's working, do that now! I like to type a math expression like 5 * 3 into the command window and press Enter , which should output 15","title":"Interactive Programming with the REPL"},{"location":"getting-started/#opening-editing-saving-and-running-py-files","text":"With your board connected to the Online IDE, click the Open button and select your file. Now you can edit the file in the Editor window. Each time you click Save and Run , your code will be saved and the board will restart and run the code. Don't forget to use Save As before class ends to save a copy to your computer!","title":"Opening, Editing, Saving, and Running .py Files"},{"location":"ide/","text":"Development Environment The IDE is the program in which you will write your code. An IDE is an all-in-one program that lets you write and run code, often with many other features included. For working with microcontrollers, an IDE should have a serial console . You don't technically need an IDE - you can write your code in any text editor (like Notepad on Windows) and run your code separately, but an IDE is a lot more convenient. For work in this class, we'll be using the CircuitPython Online IDE because it works on Chromebooks. CircuitPython Online IDE Interface 1 - Connect This button will let you connect the board to the IDE so you can interact with it from your computer. When connected, it will show connected instead of connect , but watch out - if the board gets disconnected accidentally, the online IDE doesn't know so it'll still say connected and you'll need to reload the page 2 - Open This button will let you open files from your board. If you don't see your files, make sure you're looking in the right folder! 3 - Save and Run This button will save your code and reboot the board so the code runs 4 - Save As This will let you save a copy of the file you're currently editing. Don't forget to save your work to your computer. There's no guarantee it will still be on the board when you get it back! 5 - Editor Window This is the window where you'll edit your code 6 - Serial Console This window contains the serial console so you can interact with the board 7 - Command Window This is where you'll type inputs for the serial console 8 - Force Stop This button will use the serial console 's Ctrl + C shortcut to force stop whatever's running. You can also do this from the keyboard, but watch out for the change to the shortcut. In the online IDE , you'll need to use Ctrl + Shift + C and may still run into issues because it may bring up the browser's developer tools 9 - Reboot This button will use the serial console 's Ctrl + D shortcut to reboot the board. You can also do this from the keyboard, but watch out for the change to the shortcut. In the online IDE , you'll need to use Ctrl + Shift + D or you'll end up bookmarking the website instead","title":"Development Environment"},{"location":"ide/#development-environment","text":"The IDE is the program in which you will write your code. An IDE is an all-in-one program that lets you write and run code, often with many other features included. For working with microcontrollers, an IDE should have a serial console . You don't technically need an IDE - you can write your code in any text editor (like Notepad on Windows) and run your code separately, but an IDE is a lot more convenient. For work in this class, we'll be using the CircuitPython Online IDE because it works on Chromebooks.","title":"Development Environment"},{"location":"ide/#circuitpython-online-ide-interface","text":"1 - Connect This button will let you connect the board to the IDE so you can interact with it from your computer. When connected, it will show connected instead of connect , but watch out - if the board gets disconnected accidentally, the online IDE doesn't know so it'll still say connected and you'll need to reload the page 2 - Open This button will let you open files from your board. If you don't see your files, make sure you're looking in the right folder! 3 - Save and Run This button will save your code and reboot the board so the code runs 4 - Save As This will let you save a copy of the file you're currently editing. Don't forget to save your work to your computer. There's no guarantee it will still be on the board when you get it back! 5 - Editor Window This is the window where you'll edit your code 6 - Serial Console This window contains the serial console so you can interact with the board 7 - Command Window This is where you'll type inputs for the serial console 8 - Force Stop This button will use the serial console 's Ctrl + C shortcut to force stop whatever's running. You can also do this from the keyboard, but watch out for the change to the shortcut. In the online IDE , you'll need to use Ctrl + Shift + C and may still run into issues because it may bring up the browser's developer tools 9 - Reboot This button will use the serial console 's Ctrl + D shortcut to reboot the board. You can also do this from the keyboard, but watch out for the change to the shortcut. In the online IDE , you'll need to use Ctrl + Shift + D or you'll end up bookmarking the website instead","title":"CircuitPython Online IDE Interface"},{"location":"more-resources/","text":"Links & External Resources CircuitPython Online IDE : This is a good way to program the board when you're on a Chromebook CircuitPython Simulator : This will let you practice without a physical board","title":"Links"},{"location":"more-resources/#links-external-resources","text":"CircuitPython Online IDE : This is a good way to program the board when you're on a Chromebook CircuitPython Simulator : This will let you practice without a physical board","title":"Links &amp; External Resources"},{"location":"exercises/001-printing/","text":"Exercise 1 - The Print Function Goals Open, edit, save, and run code Utilize builtin functions of Python/CircuitPython Preparation Connect your board to the computer and open the code.py file. Delete any pre-existing code from the board. See getting started for help with this step. Concepts & Vocabulary Calling functions print() argument(s) Background Info This is a very, very simple piece of code, but it'll be a great way to make sure you understand how to run code. Besides, you'll be using the print() function a lot, so I want to make sure you nderstand it! The term for using a function is \"calling\" a function. So for instance, we will call the print() function in this exercise. Remember that every function has an input, a process, and an output. A function call will start with the name of the function. In this case, the name is print . The name must always be followed by parentheses () for the input, even if you're not going to be putting anything inside them. If a function takes arguments , they go inside the parentheses. If there's more than one argument, you separate them with commas. Try It Please take a moment to see if you can predict what this will do before you run the code. 1 2 3 4 5 6 print ( \"hello\" ) print ( \"hello world\" ) print ( \"a\" , \"b\" , \"c\" ) ' print ( 1 + 1 ) print ( \"1 + 1\" ) print ( \"1\" + \"1\" ) Show me your code in action To get credit for this exercise, I will need to see your code running. This will be scored for completion. If I am not available to check your work when you're ready, make sure you use Save As to save a copy on your computer (not only on the board!) so you can continue on and show me the code running later.","title":"001 - Printing"},{"location":"exercises/001-printing/#exercise-1-the-print-function","text":"","title":"Exercise 1 - The Print Function"},{"location":"exercises/001-printing/#goals","text":"Open, edit, save, and run code Utilize builtin functions of Python/CircuitPython","title":"Goals"},{"location":"exercises/001-printing/#preparation","text":"Connect your board to the computer and open the code.py file. Delete any pre-existing code from the board. See getting started for help with this step.","title":"Preparation"},{"location":"exercises/001-printing/#concepts-vocabulary","text":"Calling functions print() argument(s)","title":"Concepts &amp; Vocabulary"},{"location":"exercises/001-printing/#background-info","text":"This is a very, very simple piece of code, but it'll be a great way to make sure you understand how to run code. Besides, you'll be using the print() function a lot, so I want to make sure you nderstand it! The term for using a function is \"calling\" a function. So for instance, we will call the print() function in this exercise. Remember that every function has an input, a process, and an output. A function call will start with the name of the function. In this case, the name is print . The name must always be followed by parentheses () for the input, even if you're not going to be putting anything inside them. If a function takes arguments , they go inside the parentheses. If there's more than one argument, you separate them with commas.","title":"Background Info"},{"location":"exercises/001-printing/#try-it","text":"Please take a moment to see if you can predict what this will do before you run the code. 1 2 3 4 5 6 print ( \"hello\" ) print ( \"hello world\" ) print ( \"a\" , \"b\" , \"c\" ) ' print ( 1 + 1 ) print ( \"1 + 1\" ) print ( \"1\" + \"1\" )","title":"Try It"},{"location":"exercises/001-printing/#show-me-your-code-in-action","text":"To get credit for this exercise, I will need to see your code running. This will be scored for completion. If I am not available to check your work when you're ready, make sure you use Save As to save a copy on your computer (not only on the board!) so you can continue on and show me the code running later.","title":"Show me your code in action"},{"location":"exercises/002-imports/","text":"Exercise 2 - Importing Modules Goals Open, edit, save, and run code Import modules to bring in additional functionality Preparation Connect your board to the computer and open the code.py file. Delete any pre-existing code from the board. See getting started for help with this step. Concepts & Vocabulary import module dir() Background Info Building on your printing exercise, let's take a look at the board the way the computer sees it. To complete this exercise, you're going to import the board module and print out the contents of the board. The board module is one we'll use a lot, because it saves us a lot of work. Not all boards are set up the same way - a built in LED might be on pin 12 on one board, pin 13 on another, and pin 4 on a third board. Instead of modifying the code everytime you use a different style of board, you can use board.LED to refer to that pin no matter what microcontroller pin it's actually on . The dir() function (which stands for directory ) will return (not print) a list all the contents of a folder or any other object in Python. Because it returns the list as a value, it can be used as an argument for another function, like the print function. Try It Look at the list that is printed out. Can you tell what any of these terms mean? code 1 2 3 import board print ( dir ( board )) output 1 2 3 4 5 6 7 Auto-reload is on. Simply save files over USB to run them or enter REPL to disable. code.py output: ['__class__', '__name__', 'A0', 'A1', 'A2', 'A3', 'GP0', 'GP1', 'GP10', 'GP11', 'GP12', 'GP13', 'GP14', 'GP15', 'GP16', 'GP17', 'GP18', 'GP19', 'GP2', 'GP20', 'GP21', 'GP22', 'GP23', 'GP24', 'GP25', 'GP26', 'GP26_A0', 'GP27', 'GP27_A1', 'GP28', 'GP28_A2', 'GP3', 'GP4', 'GP5', 'GP6', 'GP7', 'GP8', 'GP9', 'LED', 'SMPS_MODE', 'VBUS_SENSE', 'VOLTAGE_MONITOR', 'board_id'] Code done running. Press any key to enter the REPL. Use CTRL-D to reload. Show me your code in action To get credit for this exercise, I will need to see your code running. This will be scored for completion. If I am not available to check your work when you're ready, make sure you use Save As to save a copy on your computer (not only on the board!) so you can continue on and show me the code running later.","title":"002 - Imports"},{"location":"exercises/002-imports/#exercise-2-importing-modules","text":"","title":"Exercise 2 - Importing Modules"},{"location":"exercises/002-imports/#goals","text":"Open, edit, save, and run code Import modules to bring in additional functionality","title":"Goals"},{"location":"exercises/002-imports/#preparation","text":"Connect your board to the computer and open the code.py file. Delete any pre-existing code from the board. See getting started for help with this step.","title":"Preparation"},{"location":"exercises/002-imports/#concepts-vocabulary","text":"import module dir()","title":"Concepts &amp; Vocabulary"},{"location":"exercises/002-imports/#background-info","text":"Building on your printing exercise, let's take a look at the board the way the computer sees it. To complete this exercise, you're going to import the board module and print out the contents of the board. The board module is one we'll use a lot, because it saves us a lot of work. Not all boards are set up the same way - a built in LED might be on pin 12 on one board, pin 13 on another, and pin 4 on a third board. Instead of modifying the code everytime you use a different style of board, you can use board.LED to refer to that pin no matter what microcontroller pin it's actually on . The dir() function (which stands for directory ) will return (not print) a list all the contents of a folder or any other object in Python. Because it returns the list as a value, it can be used as an argument for another function, like the print function.","title":"Background Info"},{"location":"exercises/002-imports/#try-it","text":"Look at the list that is printed out. Can you tell what any of these terms mean? code 1 2 3 import board print ( dir ( board )) output 1 2 3 4 5 6 7 Auto-reload is on. Simply save files over USB to run them or enter REPL to disable. code.py output: ['__class__', '__name__', 'A0', 'A1', 'A2', 'A3', 'GP0', 'GP1', 'GP10', 'GP11', 'GP12', 'GP13', 'GP14', 'GP15', 'GP16', 'GP17', 'GP18', 'GP19', 'GP2', 'GP20', 'GP21', 'GP22', 'GP23', 'GP24', 'GP25', 'GP26', 'GP26_A0', 'GP27', 'GP27_A1', 'GP28', 'GP28_A2', 'GP3', 'GP4', 'GP5', 'GP6', 'GP7', 'GP8', 'GP9', 'LED', 'SMPS_MODE', 'VBUS_SENSE', 'VOLTAGE_MONITOR', 'board_id'] Code done running. Press any key to enter the REPL. Use CTRL-D to reload.","title":"Try It"},{"location":"exercises/002-imports/#show-me-your-code-in-action","text":"To get credit for this exercise, I will need to see your code running. This will be scored for completion. If I am not available to check your work when you're ready, make sure you use Save As to save a copy on your computer (not only on the board!) so you can continue on and show me the code running later.","title":"Show me your code in action"},{"location":"exercises/003-digitalio/","text":"Exercise 3 - DigitalIO Goals Import modules to bring in additional functionality Work with the digitalio library Utilize digital outputs to control an LED Preparation Connect your board to the computer and open the code.py or main.py file. Whichever one you have is fine but I'll be referring to it as code.py . Delete any pre-existing code from the board. See getting started for help with this step. We'll be running code from a python file today Concepts & Vocabulary board (module) time (module) digitalio (module) input output dot notation Background Info Okay, we're finally going to make something happen that you can see in the real world! We have several different boards in use right now, but all of them have a bulit in LED - that's an LED that's soldered directly onto the board and already connected correctly to the microcontroller. These are great for troubleshooting, because there's no chance of you wiring things up wrong. We'll do this in a few stages. Try It Part 1 - Imports Save and run this version of the code. There's an explanation below! 1 2 3 4 # Import necessary libaries import board import digitalio import time What you should see: The board should reboot, run the code, and print out a message that it's done running. Make sure you don't get any errors, though! The reason we're running this code a little at a time is because I want you to go through the process in the right way - if you write the code all at once, it's harder to spot errors and harder to formulate what to do. What this does: This imports modules for working with the board, working with digital inputs and outputs, and working with time into the code. Part 2 - Creating a Digital Output Save and run this version of the code. Only the code below the line of asterisks ****** is new. There's an explanation below! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Import necessary libaries import board import digitalio import time # ************************************** # # create a new DigitalIO object connected to whatever pin the board's built in LED is attached to. # Assign this to a variable so we can refer to it again led = digitalio . DigitalInOut ( board . LED ) # Set our new DigitalIO object to be an output led . direction = digitalio . Direction . OUTPUT # Print the value of the LED print ( led . value ) What you should see: The board should reboot, run the code, and print out a message that it's done running. In the serial console, you should see it print either True or False . Make sure you don't have any errors. Nothing will light up yet. What this does: The comments explain this too, but here you go: - The first new line of code creates a DigitalIO object. We have to tell it what pin we're using, but instead of giving it a pin number (which we could do, but will vary between boards), we tell it to go look up the definition in the board module and use whatever pin the built in LED is attached to - The second new line of code sets this DigitalIO object to be an OUTPUT so it can send signals - The third new line of code will print out the value assigned to the LED. True will turn it on, False will turn it off Part 3 - Turning on the LED Save and run this version of the code. Only the code below the line of asterisks ****** is new. There's an explanation below! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # Import necessary libaries import board import digitalio import time # create a new DigitalIO object connected to whatever pin the board's built in LED is attached to. # Assign this to a variable so we can refer to it again led = digitalio . DigitalInOut ( board . LED ) # Set our new DigitalIO object to be an output led . direction = digitalio . Direction . OUTPUT # Print the value of the LED print ( led . value ) # ************************************** # # Set the LED's value to True to turn it on led . value = True # Print the value of the LED print ( led . value ) What you should see: In the serial console, you should see it print either True or False , and then on the next line, it should print True , which is the value we assigned to led.value. Make sure you don't have any errors. You won't see anything lighting up, though! What this does: We set the LED's value to True to turn it on Question Why do you think you didn't see the LED turn on? Part 4 - Delay! Save and run this version of the code. Only the code below the line of asterisks ****** is new. There's an explanation below! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # Import necessary libaries import board import digitalio import time # create a new DigitalIO object connected to whatever pin the board's built in LED is attached to. # Assign this to a variable so we can refer to it again led = digitalio . DigitalInOut ( board . LED ) # Set our new DigitalIO object to be an output led . direction = digitalio . Direction . OUTPUT # Print the value of the LED print ( led . value ) # Set the LED's value to True to turn it on led . value = True # Print the value of the LED print ( led . value ) # ************************************** # time . sleep ( 5 ) What you should see: In the serial console, you should see it print either True or False , and then on the next line, it should print True , which is the value we assigned to led.value. Make sure you don't have any errors. You should also see the LED light up for 5 seconds! What this does: We told the board to pause for 5 seconds after turning the LED on Question How could you turn the LED off and on again? Show me your code in action Total of 5 points 5 points: You made your LED blink repeatedly 4.5 points: You made your LED change at least twice 4 points: Your LED turns on 3 points: You set up your LED but it doesn't turn on 0 points: You didn't get a meaningful amount of htis code completed","title":"003 - DigitalIO"},{"location":"exercises/003-digitalio/#exercise-3-digitalio","text":"","title":"Exercise 3 - DigitalIO"},{"location":"exercises/003-digitalio/#goals","text":"Import modules to bring in additional functionality Work with the digitalio library Utilize digital outputs to control an LED","title":"Goals"},{"location":"exercises/003-digitalio/#preparation","text":"Connect your board to the computer and open the code.py or main.py file. Whichever one you have is fine but I'll be referring to it as code.py . Delete any pre-existing code from the board. See getting started for help with this step. We'll be running code from a python file today","title":"Preparation"},{"location":"exercises/003-digitalio/#concepts-vocabulary","text":"board (module) time (module) digitalio (module) input output dot notation","title":"Concepts &amp; Vocabulary"},{"location":"exercises/003-digitalio/#background-info","text":"Okay, we're finally going to make something happen that you can see in the real world! We have several different boards in use right now, but all of them have a bulit in LED - that's an LED that's soldered directly onto the board and already connected correctly to the microcontroller. These are great for troubleshooting, because there's no chance of you wiring things up wrong. We'll do this in a few stages.","title":"Background Info"},{"location":"exercises/003-digitalio/#try-it","text":"","title":"Try It"},{"location":"exercises/003-digitalio/#part-1-imports","text":"Save and run this version of the code. There's an explanation below! 1 2 3 4 # Import necessary libaries import board import digitalio import time What you should see: The board should reboot, run the code, and print out a message that it's done running. Make sure you don't get any errors, though! The reason we're running this code a little at a time is because I want you to go through the process in the right way - if you write the code all at once, it's harder to spot errors and harder to formulate what to do. What this does: This imports modules for working with the board, working with digital inputs and outputs, and working with time into the code.","title":"Part 1 - Imports"},{"location":"exercises/003-digitalio/#part-2-creating-a-digital-output","text":"Save and run this version of the code. Only the code below the line of asterisks ****** is new. There's an explanation below! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Import necessary libaries import board import digitalio import time # ************************************** # # create a new DigitalIO object connected to whatever pin the board's built in LED is attached to. # Assign this to a variable so we can refer to it again led = digitalio . DigitalInOut ( board . LED ) # Set our new DigitalIO object to be an output led . direction = digitalio . Direction . OUTPUT # Print the value of the LED print ( led . value ) What you should see: The board should reboot, run the code, and print out a message that it's done running. In the serial console, you should see it print either True or False . Make sure you don't have any errors. Nothing will light up yet. What this does: The comments explain this too, but here you go: - The first new line of code creates a DigitalIO object. We have to tell it what pin we're using, but instead of giving it a pin number (which we could do, but will vary between boards), we tell it to go look up the definition in the board module and use whatever pin the built in LED is attached to - The second new line of code sets this DigitalIO object to be an OUTPUT so it can send signals - The third new line of code will print out the value assigned to the LED. True will turn it on, False will turn it off","title":"Part 2 - Creating a Digital Output"},{"location":"exercises/003-digitalio/#part-3-turning-on-the-led","text":"Save and run this version of the code. Only the code below the line of asterisks ****** is new. There's an explanation below! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # Import necessary libaries import board import digitalio import time # create a new DigitalIO object connected to whatever pin the board's built in LED is attached to. # Assign this to a variable so we can refer to it again led = digitalio . DigitalInOut ( board . LED ) # Set our new DigitalIO object to be an output led . direction = digitalio . Direction . OUTPUT # Print the value of the LED print ( led . value ) # ************************************** # # Set the LED's value to True to turn it on led . value = True # Print the value of the LED print ( led . value ) What you should see: In the serial console, you should see it print either True or False , and then on the next line, it should print True , which is the value we assigned to led.value. Make sure you don't have any errors. You won't see anything lighting up, though! What this does: We set the LED's value to True to turn it on Question Why do you think you didn't see the LED turn on?","title":"Part 3 - Turning on the LED"},{"location":"exercises/003-digitalio/#part-4-delay","text":"Save and run this version of the code. Only the code below the line of asterisks ****** is new. There's an explanation below! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # Import necessary libaries import board import digitalio import time # create a new DigitalIO object connected to whatever pin the board's built in LED is attached to. # Assign this to a variable so we can refer to it again led = digitalio . DigitalInOut ( board . LED ) # Set our new DigitalIO object to be an output led . direction = digitalio . Direction . OUTPUT # Print the value of the LED print ( led . value ) # Set the LED's value to True to turn it on led . value = True # Print the value of the LED print ( led . value ) # ************************************** # time . sleep ( 5 ) What you should see: In the serial console, you should see it print either True or False , and then on the next line, it should print True , which is the value we assigned to led.value. Make sure you don't have any errors. You should also see the LED light up for 5 seconds! What this does: We told the board to pause for 5 seconds after turning the LED on Question How could you turn the LED off and on again?","title":"Part 4 - Delay!"},{"location":"exercises/003-digitalio/#show-me-your-code-in-action","text":"Total of 5 points 5 points: You made your LED blink repeatedly 4.5 points: You made your LED change at least twice 4 points: Your LED turns on 3 points: You set up your LED but it doesn't turn on 0 points: You didn't get a meaningful amount of htis code completed","title":"Show me your code in action"},{"location":"exercises/004-blink-pattern/","text":"Exercise 4 - Blink Pattern Goals Work with the digitalio library Utilize digital outputs to control an LED Utilize loops to accomplish repetitive tasks Preparation Connect your board to the computer and open the code.py or main.py file. Whichever one you have is fine but I'll be referring to it as code.py . Delete any pre-existing code from the board. See getting started for help with this step. We'll be running code from a python file today Concepts & Vocabulary for loop while loop setup range() New Programming Syntax 1 2 3 4 5 6 7 8 9 10 11 # range(max) range ( 5 ) # outputs a range of numbers => 0, 1, 2, 3, 4 # range(min, max) range ( - 3 , 3 ) # outputs a range of numbers => -3, -2, -1, 0, 1, 2 # range(min, max, step) range ( - 200 , 100 , 50 ) # outputs (returns) a range of numbers => -200, -150, -100, -50, 0, 50 The range function is used to generate a series of numbers, and is often combined with a for loop 1 2 3 4 5 6 # for loops will repeat a set number of times, or for a set of objects for n in range ( 5 ): # inside the loop, we have a variable called n # n is going to be assigned 0 at first, then 1 on the next loop, and so on until 4 # after n = 4, the loop will not continue running, because we've reached the end of the range print ( n ) The for loop above will print the following in the serial console: 1 2 3 4 5 0 1 2 3 4 Background Info For this one, we're going to create a blinking pattern. Using the for loop we covered in class, create a pattern of blinking lights that changes over time. For instance, you might have it turn on for 1 second, then 2 seconds, then 3 seconds, and so on. Try It All of the code you need for this comes from exercise 3 and from the for loops above. We'll go over it in class too. Show me your code in action Total of 5 points 5 points: You created a for loop to blink in a pattern utilizing the variable that controls the loop 4 points: You created a for loop to blink your LED, but didn't utilize the variable 3 points: You set up your LED but didn't blink it 0 points: You didn't get a meaningful amount of this code completed","title":"004 - Blink Pattern"},{"location":"exercises/004-blink-pattern/#exercise-4-blink-pattern","text":"","title":"Exercise 4 - Blink Pattern"},{"location":"exercises/004-blink-pattern/#goals","text":"Work with the digitalio library Utilize digital outputs to control an LED Utilize loops to accomplish repetitive tasks","title":"Goals"},{"location":"exercises/004-blink-pattern/#preparation","text":"Connect your board to the computer and open the code.py or main.py file. Whichever one you have is fine but I'll be referring to it as code.py . Delete any pre-existing code from the board. See getting started for help with this step. We'll be running code from a python file today","title":"Preparation"},{"location":"exercises/004-blink-pattern/#concepts-vocabulary","text":"for loop while loop setup range()","title":"Concepts &amp; Vocabulary"},{"location":"exercises/004-blink-pattern/#new-programming-syntax","text":"1 2 3 4 5 6 7 8 9 10 11 # range(max) range ( 5 ) # outputs a range of numbers => 0, 1, 2, 3, 4 # range(min, max) range ( - 3 , 3 ) # outputs a range of numbers => -3, -2, -1, 0, 1, 2 # range(min, max, step) range ( - 200 , 100 , 50 ) # outputs (returns) a range of numbers => -200, -150, -100, -50, 0, 50 The range function is used to generate a series of numbers, and is often combined with a for loop 1 2 3 4 5 6 # for loops will repeat a set number of times, or for a set of objects for n in range ( 5 ): # inside the loop, we have a variable called n # n is going to be assigned 0 at first, then 1 on the next loop, and so on until 4 # after n = 4, the loop will not continue running, because we've reached the end of the range print ( n ) The for loop above will print the following in the serial console: 1 2 3 4 5 0 1 2 3 4","title":"New Programming Syntax"},{"location":"exercises/004-blink-pattern/#background-info","text":"For this one, we're going to create a blinking pattern. Using the for loop we covered in class, create a pattern of blinking lights that changes over time. For instance, you might have it turn on for 1 second, then 2 seconds, then 3 seconds, and so on.","title":"Background Info"},{"location":"exercises/004-blink-pattern/#try-it","text":"All of the code you need for this comes from exercise 3 and from the for loops above. We'll go over it in class too.","title":"Try It"},{"location":"exercises/004-blink-pattern/#show-me-your-code-in-action","text":"Total of 5 points 5 points: You created a for loop to blink in a pattern utilizing the variable that controls the loop 4 points: You created a for loop to blink your LED, but didn't utilize the variable 3 points: You set up your LED but didn't blink it 0 points: You didn't get a meaningful amount of this code completed","title":"Show me your code in action"},{"location":"quickref/control-structures/","text":"Control Structures Conditional Statements If If-Else If-Elseif-Else Loops While Loops For Loops","title":"Control Structures"},{"location":"quickref/control-structures/#control-structures","text":"","title":"Control Structures"},{"location":"quickref/control-structures/#conditional-statements","text":"","title":"Conditional Statements"},{"location":"quickref/control-structures/#if","text":"","title":"If"},{"location":"quickref/control-structures/#if-else","text":"","title":"If-Else"},{"location":"quickref/control-structures/#if-elseif-else","text":"","title":"If-Elseif-Else"},{"location":"quickref/control-structures/#loops","text":"","title":"Loops"},{"location":"quickref/control-structures/#while-loops","text":"","title":"While Loops"},{"location":"quickref/control-structures/#for-loops","text":"","title":"For Loops"},{"location":"quickref/data-and-variables/","text":"Data and Variables coming soon","title":"Data Types and Variables"},{"location":"quickref/data-and-variables/#data-and-variables","text":"coming soon","title":"Data and Variables"}]}