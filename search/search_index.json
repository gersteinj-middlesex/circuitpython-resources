{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CircuitPython Resources Instead of giving you a lot of different files or handouts, I'm creating a basic documentation site where you can find all my resources for you. This will be undergoing a lot of growth as I build it, but you'll be able to use this as a resource while you do work in my class. Please be aware that if you ask me for help with somethign that's already detailed in here, I may tell you to go read the documentation. For anything you want more info on, please let me know and I'll be happy to add it here if relevant, even if I hadn't originally planned on including it. Using This Resource On the left, you'll find a menu with the different categories you can find help for. On the right, you'll find a table of contents for the specific page you're on. I've created a glossary, and whenever you see a term that has a definition in the glossary, you'll see it lightly underlined like IDE . Move your cursor over the word and a definition will pop up.","title":"Home"},{"location":"#circuitpython-resources","text":"Instead of giving you a lot of different files or handouts, I'm creating a basic documentation site where you can find all my resources for you. This will be undergoing a lot of growth as I build it, but you'll be able to use this as a resource while you do work in my class. Please be aware that if you ask me for help with somethign that's already detailed in here, I may tell you to go read the documentation. For anything you want more info on, please let me know and I'll be happy to add it here if relevant, even if I hadn't originally planned on including it.","title":"CircuitPython Resources"},{"location":"#using-this-resource","text":"On the left, you'll find a menu with the different categories you can find help for. On the right, you'll find a table of contents for the specific page you're on. I've created a glossary, and whenever you see a term that has a definition in the glossary, you'll see it lightly underlined like IDE . Move your cursor over the word and a definition will pop up.","title":"Using This Resource"},{"location":"board/","text":"Development Board The microcontrollers we're using for this class run CircuitPython . This is a small version of Python that works on lower-powered hardware. Basic Setup Connect the board to a computer using a USB cable (see warning above) Make sure the board shows up in your computer's filesystem. It should show up as a removable drive (like plugging in a flash drive) and will generally be called CIRCUITPY Open your development environment. For the Chromebooks, we're using URFDVW's CircuitPython Online IDE . If you want to keep working with this outside of class and you have a computer with a full operating system, there are lots of other options you can use Make a software connection between the board and computer if needed. You must do this to use the online IDE . To make the connection, click the connect button and select your board At this point, you should be able to enter the REPL or open/edit/save files on the board's internal storage USB cable warning Some USB cables can only be used for charging! These cables don't have the necessary wires to send data back and forth, but they don't look any different from a USB cable that does. If the computer doesn't recognize the board, sometimes this is the reason. I will always give you USB cables that can transmit data, but if you're using your own you may run into this problem Connected isn't always connected If you disconnect your board (or put it into boot mode), it will disconnect from the online IDE , but the button in the IDE will still show connected because it doesn't check on its own. If you run into this problem, refresh the page and redo step 4 Troubleshooting Reinstalling/Updating CircuitPython Warning This is not something you'll need to do every time you work with the board. In class, you should only do this if told to do so. Everything on the board will be erased, so make sure you've saved everything you want to keep! Sometimes we need to update or reinstall CircuitPython. This is a lot like doing a factory reset on your phone when things aren't working right. Download the correct version of CircuitPython . Make sure you choose the correct board. The name of the board is written on the board itself. Plug your board into the computer with a USB cable you know works. It should show up in the filesystem as CIRCUITPY or another similar name. Double click the reset button. The CIRCUITPY drive will go away and be replaced by a drive called ITSYBOOT , CPLAYBOOT , or something similar. Different boards will show up with different names, but the important thing is it will always include the word BOOT . This puts your board into boot mode so you can install CircuitPython. It's a lot like putting your phone into rescue mode to do a factory reset, and like rescue mode, is something you won't do most of the time. Boards that have an RGB indicator light and a regular built in LED will have the built in LED light up red and the RGB indicator light up in bright green. Drag the .uf2 file you downloaded in step one into the ITSYBOOT (or whatever it's called) drive. The boot drive will go away as the board restarts. It will return as CIRCUITPY . Your board is ready to use.","title":"Board"},{"location":"board/#development-board","text":"The microcontrollers we're using for this class run CircuitPython . This is a small version of Python that works on lower-powered hardware.","title":"Development Board"},{"location":"board/#basic-setup","text":"Connect the board to a computer using a USB cable (see warning above) Make sure the board shows up in your computer's filesystem. It should show up as a removable drive (like plugging in a flash drive) and will generally be called CIRCUITPY Open your development environment. For the Chromebooks, we're using URFDVW's CircuitPython Online IDE . If you want to keep working with this outside of class and you have a computer with a full operating system, there are lots of other options you can use Make a software connection between the board and computer if needed. You must do this to use the online IDE . To make the connection, click the connect button and select your board At this point, you should be able to enter the REPL or open/edit/save files on the board's internal storage USB cable warning Some USB cables can only be used for charging! These cables don't have the necessary wires to send data back and forth, but they don't look any different from a USB cable that does. If the computer doesn't recognize the board, sometimes this is the reason. I will always give you USB cables that can transmit data, but if you're using your own you may run into this problem Connected isn't always connected If you disconnect your board (or put it into boot mode), it will disconnect from the online IDE , but the button in the IDE will still show connected because it doesn't check on its own. If you run into this problem, refresh the page and redo step 4","title":"Basic Setup"},{"location":"board/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"board/#reinstallingupdating-circuitpython","text":"Warning This is not something you'll need to do every time you work with the board. In class, you should only do this if told to do so. Everything on the board will be erased, so make sure you've saved everything you want to keep! Sometimes we need to update or reinstall CircuitPython. This is a lot like doing a factory reset on your phone when things aren't working right. Download the correct version of CircuitPython . Make sure you choose the correct board. The name of the board is written on the board itself. Plug your board into the computer with a USB cable you know works. It should show up in the filesystem as CIRCUITPY or another similar name. Double click the reset button. The CIRCUITPY drive will go away and be replaced by a drive called ITSYBOOT , CPLAYBOOT , or something similar. Different boards will show up with different names, but the important thing is it will always include the word BOOT . This puts your board into boot mode so you can install CircuitPython. It's a lot like putting your phone into rescue mode to do a factory reset, and like rescue mode, is something you won't do most of the time. Boards that have an RGB indicator light and a regular built in LED will have the built in LED light up red and the RGB indicator light up in bright green. Drag the .uf2 file you downloaded in step one into the ITSYBOOT (or whatever it's called) drive. The boot drive will go away as the board restarts. It will return as CIRCUITPY . Your board is ready to use.","title":"Reinstalling/Updating CircuitPython"},{"location":"ide/","text":"Development Environment The IDE is the program in which you will write your code. An IDE is an all-in-one program that lets you write and run code, often with many other features included. For working with microcontrollers, an IDE should have a serial console . You don't technically need an IDE - you can write your code in any text editor (like Notepad on Windows) and run your code separately, but an IDE is a lot more convenient. For work in this class, we'll be using the CircuitPython Online IDE because it works on Chromebooks. Entering the REPL For this, you'll be working in the serial console . As soon as the board starts up, it will run the code.py or main.py file saved on it (if present). After the code is finished running, you'll see the following in the serial console : ******************************************* Auto-reload is on. Simply save files over USB to run them or enter REPL to disable. Press any key to enter the REPL. Use CTRL-D to reload. Help, I don't see that! Remember how I said that the board will immediately start running the code that's saved on it? The lines above will only show after the code is done running, but sometimes you'll have code on your board that has an infinite loop. If that happens, the code will never stop running so it'll never get to that point. You can spot this happening if your code is constantly showing you some output (either printing or doing something on the board itself), or even if the board is connected but you don't see anything - sometimes the code will be doing things you can't see! If this happens to you, force stop the board and you should get the lines above so you can continue on with these directions At this point, you can click in the Command Window and press Enter to open up the REPL . Adafruit CircuitPython 7.1.1 on 2022-01-14; Adafruit ItsyBitsy M0 Express with samd21g18 >>> If you've successfully entered the REPL , you'll see something similar to the lines above appear in the serial console right above the command window. You may see a different version of CircuitPython or a different board listed, but that's okay, it depends on what you're using. The >>> line is the command prompt. It shows you that the board is waiting for you to give it an input. You can do that in the command window. Congratulations, you're now in the REPL Editing Code Files With your board connected to the Online IDE , click the Open button and select your file. Now you can edit the file in the Editor window. Each time you click Save and Run , your code will be saved and the board will restart and run the code. Don't forget to use Save As before class ends to save a copy to your computer! CircuitPython Online IDE Interface 1 - Connect This button will let you connect the board to the IDE so you can interact with it from your computer. When connected, it will show connected instead of connect , but watch out - if the board gets disconnected accidentally, the online IDE doesn't know so it'll still say connected and you'll need to reload the page 2 - Open This button will let you open files from your board. If you don't see your files, make sure you're looking in the right folder! 3 - Save and Run This button will save your code and reboot the board so the code runs 4 - Save As This will let you save a copy of the file you're currently editing. Don't forget to save your work to your computer. There's no guarantee it will still be on the board when you get it back! 5 - Editor Window This is the window where you'll edit your code 6 - Serial Console This window contains the serial console so you can interact with the board 7 - Command Window This is where you'll type inputs for the serial console 8 - Force Stop This button will use the serial console 's Ctrl + C shortcut to force stop whatever's running. You can also do this from the keyboard, but watch out for the change to the shortcut. In the online IDE , you'll need to use Ctrl + Shift + C and may still run into issues because it may bring up the browser's developer tools 9 - Reboot This button will use the serial console 's Ctrl + D shortcut to reboot the board. You can also do this from the keyboard, but watch out for the change to the shortcut. In the online IDE , you'll need to use Ctrl + Shift + D or you'll end up bookmarking the website instead","title":"IDE"},{"location":"ide/#development-environment","text":"The IDE is the program in which you will write your code. An IDE is an all-in-one program that lets you write and run code, often with many other features included. For working with microcontrollers, an IDE should have a serial console . You don't technically need an IDE - you can write your code in any text editor (like Notepad on Windows) and run your code separately, but an IDE is a lot more convenient. For work in this class, we'll be using the CircuitPython Online IDE because it works on Chromebooks.","title":"Development Environment"},{"location":"ide/#entering-the-repl","text":"For this, you'll be working in the serial console . As soon as the board starts up, it will run the code.py or main.py file saved on it (if present). After the code is finished running, you'll see the following in the serial console : ******************************************* Auto-reload is on. Simply save files over USB to run them or enter REPL to disable. Press any key to enter the REPL. Use CTRL-D to reload. Help, I don't see that! Remember how I said that the board will immediately start running the code that's saved on it? The lines above will only show after the code is done running, but sometimes you'll have code on your board that has an infinite loop. If that happens, the code will never stop running so it'll never get to that point. You can spot this happening if your code is constantly showing you some output (either printing or doing something on the board itself), or even if the board is connected but you don't see anything - sometimes the code will be doing things you can't see! If this happens to you, force stop the board and you should get the lines above so you can continue on with these directions At this point, you can click in the Command Window and press Enter to open up the REPL . Adafruit CircuitPython 7.1.1 on 2022-01-14; Adafruit ItsyBitsy M0 Express with samd21g18 >>> If you've successfully entered the REPL , you'll see something similar to the lines above appear in the serial console right above the command window. You may see a different version of CircuitPython or a different board listed, but that's okay, it depends on what you're using. The >>> line is the command prompt. It shows you that the board is waiting for you to give it an input. You can do that in the command window. Congratulations, you're now in the REPL","title":"Entering the REPL"},{"location":"ide/#editing-code-files","text":"With your board connected to the Online IDE , click the Open button and select your file. Now you can edit the file in the Editor window. Each time you click Save and Run , your code will be saved and the board will restart and run the code. Don't forget to use Save As before class ends to save a copy to your computer!","title":"Editing Code Files"},{"location":"ide/#circuitpython-online-ide-interface","text":"1 - Connect This button will let you connect the board to the IDE so you can interact with it from your computer. When connected, it will show connected instead of connect , but watch out - if the board gets disconnected accidentally, the online IDE doesn't know so it'll still say connected and you'll need to reload the page 2 - Open This button will let you open files from your board. If you don't see your files, make sure you're looking in the right folder! 3 - Save and Run This button will save your code and reboot the board so the code runs 4 - Save As This will let you save a copy of the file you're currently editing. Don't forget to save your work to your computer. There's no guarantee it will still be on the board when you get it back! 5 - Editor Window This is the window where you'll edit your code 6 - Serial Console This window contains the serial console so you can interact with the board 7 - Command Window This is where you'll type inputs for the serial console 8 - Force Stop This button will use the serial console 's Ctrl + C shortcut to force stop whatever's running. You can also do this from the keyboard, but watch out for the change to the shortcut. In the online IDE , you'll need to use Ctrl + Shift + C and may still run into issues because it may bring up the browser's developer tools 9 - Reboot This button will use the serial console 's Ctrl + D shortcut to reboot the board. You can also do this from the keyboard, but watch out for the change to the shortcut. In the online IDE , you'll need to use Ctrl + Shift + D or you'll end up bookmarking the website instead","title":"CircuitPython Online IDE Interface"}]}