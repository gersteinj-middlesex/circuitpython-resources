{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CircuitPython Resources Instead of giving you a lot of different files or handouts, I'm creating a basic documentation site where you can find all my resources for you. This will be undergoing a lot of growth as I build it, but you'll be able to use this as a resource while you do work in my class. Please be aware that if you ask me for help with somethign that's already detailed in here, I may tell you to go read the documentation. For anything you want more info on, please let me know and I'll be happy to add it here if relevant, even if I hadn't originally planned on including it. Using This Resource On the left, you'll find a menu with the different categories you can find help for. On the right, you'll find a table of contents for the specific page you're on. I've created a glossary, and whenever you see a term that has a definition in the glossary, you'll see it lightly underlined like IDE . Move your cursor over the word and a definition will pop up.","title":"Home"},{"location":"#circuitpython-resources","text":"Instead of giving you a lot of different files or handouts, I'm creating a basic documentation site where you can find all my resources for you. This will be undergoing a lot of growth as I build it, but you'll be able to use this as a resource while you do work in my class. Please be aware that if you ask me for help with somethign that's already detailed in here, I may tell you to go read the documentation. For anything you want more info on, please let me know and I'll be happy to add it here if relevant, even if I hadn't originally planned on including it.","title":"CircuitPython Resources"},{"location":"#using-this-resource","text":"On the left, you'll find a menu with the different categories you can find help for. On the right, you'll find a table of contents for the specific page you're on. I've created a glossary, and whenever you see a term that has a definition in the glossary, you'll see it lightly underlined like IDE . Move your cursor over the word and a definition will pop up.","title":"Using This Resource"},{"location":"getting-started/","text":"Getting Started Daily Setup Checklist Create by request of a student who had trouble remembering the process. The checkboxes are clickable so you can keep track of what you've done. Get a board & connect it to your computer with USB cable Navigate to the online IDE . If it's already open from another day, refresh your browser tab to ensure it can connect to the board Click the connect button and choose your board From here, you should be able to use the REPL or run a program on your board To edit a python file, remember to click the open button, and make sure you open the main.py (or code.py ) file that's on the drive called CIRCUITPY . If the file is on your computer, the IDE will open it just like a file on the board, but it won't run on the board. So please be careful about what file you're opening! To make sure everything is working, each exercise starts with a test file. Please make sure you run the test code even if the board appears to be doing the same thing . I often find that when students struggle to get their code to work, it's because the code they're editing isn't the code on the board. If you need to connect to the REPL , assuming you see the same thing as in the code block below, you can click in the serial console and press Enter . If you don't see that, scroll down to the \"Interactive Programming with the REPL \" section 1 2 3 4 ******************************************* Auto-reload is on. Simply save files over USB to run them or enter REPL to disable. Press any key to enter the REPL. Use CTRL-D to reload. Detailed Board Setup What You Need A development board. For right now, we're using the Adafruit ItsyBity M0 Express, but there are lots of options A suitable USB cable. All the boards we have at the school use a micro-USB cable. If you're using your own cable, make sure that it can be used for data - some USB cables are only for power! A computer to work with. A Chromebook is fine Connecting the Board to the Computer Connect the board to a computer using a USB cable Make sure the board shows up in your computer's file system. It should show up as a removable drive (like plugging in a flash drive) and will usually be called CIRCUITPY Open your development environment. For the Chromebooks, we're using URFDVW's CircuitPython Online IDE . If you want to keep working with this outside of class and you have a computer with a full operating system, there are lots of other options you can use Make a software connection between the board and computer. The online IDE won't work if you do this. To make the connection, click the connect button and select your board At this point, you should be able to enter the REPL or open/edit/save files on the board's internal storage About USB cables Some USB cables can only be used for charging! These cables don't have the necessary wires to send data back and forth, but they don't look any different from a USB cable that does. If the computer doesn't recognize the board, sometimes this is the reason. I will always give you USB cables that can transmit data, but if you're using your own you may run into this problem Connected isn't always connected If you disconnect your board (or put it into boot mode), it will disconnect from the online IDE , but the button in the IDE will still show connected because it doesn't check on its own. If you run into this problem, refresh the page and redo step 4 Interactive Programming with the REPL For this, you'll be working in the serial console . It's the right side of the online IDE As soon as the board starts up, it will run the code.py or main.py file saved on it (if present). After the code is finished running, you should see an output similar to what's below. If you don't, take a look at the box below that for more information about what's happening! 1 2 3 4 ******************************************* Auto-reload is on. Simply save files over USB to run them or enter REPL to disable. Press any key to enter the REPL. Use CTRL-D to reload. Help, I don't see that! Remember how I said that the board will immediately start running the code that's saved on it? The serial console will only be ready for you to load the REPL after the code finishes running, but sometimes you'll have code on your board that has an infinite loop. If that happens, the code will never stop running so it'll never get to that point. You can spot this happening if your code is constantly showing you some output (either printing or doing something on the board itself), or even if the board is connected but you don't see anything - sometimes the code will be doing things you can't see! If this happens to you, force stop the board and you should get the lines above so you can continue on with these directions At this point, you can click in the Command Window and press Enter to open up the REPL . If you're successful, you'll see something similar to the lines below. Your version of CircuitPython and your board may be different from mine, but the >>> is called the command prompt, and it shows that you are in (Circuit)Python and the board is waiting for you to give an input. 1 2 Adafruit CircuitPython 7.1.1 on 2022-01-14; Adafruit ItsyBitsy M0 Express with samd21g18 >>> To make sure everything's working, do that now! I like to type a math expression like 5 * 3 into the command window and press Enter , which should output 15 Opening, Editing, Saving, and Running .py Files With your board connected to the Online IDE , click the Open button and select your file. Now you can edit the file in the Editor window. Each time you click Save and Run , your code will be saved and the board will restart and run the code. Don't forget to use Save As before class ends to save a copy to your computer!","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#daily-setup-checklist","text":"Create by request of a student who had trouble remembering the process. The checkboxes are clickable so you can keep track of what you've done. Get a board & connect it to your computer with USB cable Navigate to the online IDE . If it's already open from another day, refresh your browser tab to ensure it can connect to the board Click the connect button and choose your board From here, you should be able to use the REPL or run a program on your board To edit a python file, remember to click the open button, and make sure you open the main.py (or code.py ) file that's on the drive called CIRCUITPY . If the file is on your computer, the IDE will open it just like a file on the board, but it won't run on the board. So please be careful about what file you're opening! To make sure everything is working, each exercise starts with a test file. Please make sure you run the test code even if the board appears to be doing the same thing . I often find that when students struggle to get their code to work, it's because the code they're editing isn't the code on the board. If you need to connect to the REPL , assuming you see the same thing as in the code block below, you can click in the serial console and press Enter . If you don't see that, scroll down to the \"Interactive Programming with the REPL \" section 1 2 3 4 ******************************************* Auto-reload is on. Simply save files over USB to run them or enter REPL to disable. Press any key to enter the REPL. Use CTRL-D to reload.","title":"Daily Setup Checklist"},{"location":"getting-started/#detailed-board-setup","text":"","title":"Detailed Board Setup"},{"location":"getting-started/#what-you-need","text":"A development board. For right now, we're using the Adafruit ItsyBity M0 Express, but there are lots of options A suitable USB cable. All the boards we have at the school use a micro-USB cable. If you're using your own cable, make sure that it can be used for data - some USB cables are only for power! A computer to work with. A Chromebook is fine","title":"What You Need"},{"location":"getting-started/#connecting-the-board-to-the-computer","text":"Connect the board to a computer using a USB cable Make sure the board shows up in your computer's file system. It should show up as a removable drive (like plugging in a flash drive) and will usually be called CIRCUITPY Open your development environment. For the Chromebooks, we're using URFDVW's CircuitPython Online IDE . If you want to keep working with this outside of class and you have a computer with a full operating system, there are lots of other options you can use Make a software connection between the board and computer. The online IDE won't work if you do this. To make the connection, click the connect button and select your board At this point, you should be able to enter the REPL or open/edit/save files on the board's internal storage About USB cables Some USB cables can only be used for charging! These cables don't have the necessary wires to send data back and forth, but they don't look any different from a USB cable that does. If the computer doesn't recognize the board, sometimes this is the reason. I will always give you USB cables that can transmit data, but if you're using your own you may run into this problem Connected isn't always connected If you disconnect your board (or put it into boot mode), it will disconnect from the online IDE , but the button in the IDE will still show connected because it doesn't check on its own. If you run into this problem, refresh the page and redo step 4","title":"Connecting the Board to the Computer"},{"location":"getting-started/#interactive-programming-with-the-repl","text":"For this, you'll be working in the serial console . It's the right side of the online IDE As soon as the board starts up, it will run the code.py or main.py file saved on it (if present). After the code is finished running, you should see an output similar to what's below. If you don't, take a look at the box below that for more information about what's happening! 1 2 3 4 ******************************************* Auto-reload is on. Simply save files over USB to run them or enter REPL to disable. Press any key to enter the REPL. Use CTRL-D to reload. Help, I don't see that! Remember how I said that the board will immediately start running the code that's saved on it? The serial console will only be ready for you to load the REPL after the code finishes running, but sometimes you'll have code on your board that has an infinite loop. If that happens, the code will never stop running so it'll never get to that point. You can spot this happening if your code is constantly showing you some output (either printing or doing something on the board itself), or even if the board is connected but you don't see anything - sometimes the code will be doing things you can't see! If this happens to you, force stop the board and you should get the lines above so you can continue on with these directions At this point, you can click in the Command Window and press Enter to open up the REPL . If you're successful, you'll see something similar to the lines below. Your version of CircuitPython and your board may be different from mine, but the >>> is called the command prompt, and it shows that you are in (Circuit)Python and the board is waiting for you to give an input. 1 2 Adafruit CircuitPython 7.1.1 on 2022-01-14; Adafruit ItsyBitsy M0 Express with samd21g18 >>> To make sure everything's working, do that now! I like to type a math expression like 5 * 3 into the command window and press Enter , which should output 15","title":"Interactive Programming with the REPL"},{"location":"getting-started/#opening-editing-saving-and-running-py-files","text":"With your board connected to the Online IDE , click the Open button and select your file. Now you can edit the file in the Editor window. Each time you click Save and Run , your code will be saved and the board will restart and run the code. Don't forget to use Save As before class ends to save a copy to your computer!","title":"Opening, Editing, Saving, and Running .py Files"},{"location":"ide/","text":"Development Environment The IDE is the program in which you will write your code. An IDE is an all-in-one program that lets you write and run code, often with many other features included. For working with microcontrollers, an IDE should have a serial console . You don't technically need an IDE - you can write your code in any text editor (like Notepad on Windows) and run your code separately, but an IDE is a lot more convenient. For work in this class, we'll be using the CircuitPython Online IDE because it works on Chromebooks. CircuitPython Online IDE Interface 1 - Connect This button will let you connect the board to the IDE so you can interact with it from your computer. When connected, it will show connected instead of connect , but watch out - if the board gets disconnected accidentally, the online IDE doesn't know so it'll still say connected and you'll need to reload the page 2 - Open This button will let you open files from your board. If you don't see your files, make sure you're looking in the right folder! 3 - Save and Run This button will save your code and reboot the board so the code runs 4 - Save As This will let you save a copy of the file you're currently editing. Don't forget to save your work to your computer. There's no guarantee it will still be on the board when you get it back! 5 - Editor Window This is the window where you'll edit your code 6 - Serial Console This window contains the serial console so you can interact with the board 7 - Command Window This is where you'll type inputs for the serial console 8 - Force Stop This button will use the serial console 's Ctrl + C shortcut to force stop whatever's running. You can also do this from the keyboard, but watch out for the change to the shortcut. In the online IDE , you'll need to use Ctrl + Shift + C and may still run into issues because it may bring up the browser's developer tools 9 - Reboot This button will use the serial console 's Ctrl + D shortcut to reboot the board. You can also do this from the keyboard, but watch out for the change to the shortcut. In the online IDE , you'll need to use Ctrl + Shift + D or you'll end up bookmarking the website instead","title":"Development Environment"},{"location":"ide/#development-environment","text":"The IDE is the program in which you will write your code. An IDE is an all-in-one program that lets you write and run code, often with many other features included. For working with microcontrollers, an IDE should have a serial console . You don't technically need an IDE - you can write your code in any text editor (like Notepad on Windows) and run your code separately, but an IDE is a lot more convenient. For work in this class, we'll be using the CircuitPython Online IDE because it works on Chromebooks.","title":"Development Environment"},{"location":"ide/#circuitpython-online-ide-interface","text":"1 - Connect This button will let you connect the board to the IDE so you can interact with it from your computer. When connected, it will show connected instead of connect , but watch out - if the board gets disconnected accidentally, the online IDE doesn't know so it'll still say connected and you'll need to reload the page 2 - Open This button will let you open files from your board. If you don't see your files, make sure you're looking in the right folder! 3 - Save and Run This button will save your code and reboot the board so the code runs 4 - Save As This will let you save a copy of the file you're currently editing. Don't forget to save your work to your computer. There's no guarantee it will still be on the board when you get it back! 5 - Editor Window This is the window where you'll edit your code 6 - Serial Console This window contains the serial console so you can interact with the board 7 - Command Window This is where you'll type inputs for the serial console 8 - Force Stop This button will use the serial console 's Ctrl + C shortcut to force stop whatever's running. You can also do this from the keyboard, but watch out for the change to the shortcut. In the online IDE , you'll need to use Ctrl + Shift + C and may still run into issues because it may bring up the browser's developer tools 9 - Reboot This button will use the serial console 's Ctrl + D shortcut to reboot the board. You can also do this from the keyboard, but watch out for the change to the shortcut. In the online IDE , you'll need to use Ctrl + Shift + D or you'll end up bookmarking the website instead","title":"CircuitPython Online IDE Interface"},{"location":"more-resources/","text":"Links & External Resources CircuitPython Online IDE : This is a good way to program the board when you're on a Chromebook CircuitPython Simulator : This will let you practice without a physical board","title":"Links"},{"location":"more-resources/#links-external-resources","text":"CircuitPython Online IDE : This is a good way to program the board when you're on a Chromebook CircuitPython Simulator : This will let you practice without a physical board","title":"Links &amp; External Resources"},{"location":"troubleshooting/","text":"Troubleshooting Reinstalling/Updating CircuitPython Warning This is not something you'll need to do every time you work with the board. In class, you should only do this if told to do so. Everything on the board will be erased, so make sure you've saved everything you want to keep! Sometimes we need to update or reinstall CircuitPython. This is a lot like doing a factory reset on your phone when things aren't working right. Download the correct version of CircuitPython . Make sure you choose the correct board. The name of the board is written on the board itself. Plug your board into the computer with a USB cable you know works. It should show up in the filesystem as CIRCUITPY or another similar name. Double click the reset button. The CIRCUITPY drive will go away and be replaced by a drive called ITSYBOOT , CPLAYBOOT , or something similar. Different boards will show up with different names, but the important thing is it will always include the word BOOT . This puts your board into boot mode so you can install CircuitPython. It's a lot like putting your phone into rescue mode to do a factory reset, and like rescue mode, is something you won't do most of the time. Boards that have an RGB indicator light and a regular built in LED will have the built in LED light up red and the RGB indicator light up in bright green. Drag the .uf2 file you downloaded in step one into the ITSYBOOT (or whatever it's called) drive. The boot drive will go away as the board restarts. It will return as CIRCUITPY . Your board is ready to use.","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"troubleshooting/#reinstallingupdating-circuitpython","text":"Warning This is not something you'll need to do every time you work with the board. In class, you should only do this if told to do so. Everything on the board will be erased, so make sure you've saved everything you want to keep! Sometimes we need to update or reinstall CircuitPython. This is a lot like doing a factory reset on your phone when things aren't working right. Download the correct version of CircuitPython . Make sure you choose the correct board. The name of the board is written on the board itself. Plug your board into the computer with a USB cable you know works. It should show up in the filesystem as CIRCUITPY or another similar name. Double click the reset button. The CIRCUITPY drive will go away and be replaced by a drive called ITSYBOOT , CPLAYBOOT , or something similar. Different boards will show up with different names, but the important thing is it will always include the word BOOT . This puts your board into boot mode so you can install CircuitPython. It's a lot like putting your phone into rescue mode to do a factory reset, and like rescue mode, is something you won't do most of the time. Boards that have an RGB indicator light and a regular built in LED will have the built in LED light up red and the RGB indicator light up in bright green. Drag the .uf2 file you downloaded in step one into the ITSYBOOT (or whatever it's called) drive. The boot drive will go away as the board restarts. It will return as CIRCUITPY . Your board is ready to use.","title":"Reinstalling/Updating CircuitPython"},{"location":"exercises/001-printing/","text":"Exercise 1 - The Print Function Goals Open, edit, save, and run code Utilize builtin functions of Python/CircuitPython Preparation Connect your board to the computer and open the code.py file. Delete any pre-existing code from the board. See getting started for help with this step. Concepts & Vocabulary Calling functions print() argument(s) Background Info This is a very, very simple piece of code, but it'll be a great way to make sure you understand how to run code. Besides, you'll be using the print() function a lot, so I want to make sure you nderstand it! The term for using a function is \"calling\" a function. So for instance, we will call the print() function in this exercise. Remember that every function has an input, a process, and an output. A function call will start with the name of the function. In this case, the name is print . The name must always be followed by parentheses () for the input, even if you're not going to be putting anything inside them. If a function takes arguments , they go inside the parentheses. If there's more than one argument, you separate them with commas. Try It Please take a moment to see if you can predict what this will do before you run the code. 1 2 3 4 5 6 print ( \"hello\" ) print ( \"hello world\" ) print ( \"a\" , \"b\" , \"c\" ) ' print ( 1 + 1 ) print ( \"1 + 1\" ) print ( \"1\" + \"1\" ) Show me your code in action To get credit for this exercise, I will need to see your code running. This will be scored for completion. If I am not available to check your work when you're ready, make sure you use Save As to save a copy on your computer (not only on the board!) so you can continue on and show me the code running later.","title":"001 - Printing"},{"location":"exercises/001-printing/#exercise-1-the-print-function","text":"","title":"Exercise 1 - The Print Function"},{"location":"exercises/001-printing/#goals","text":"Open, edit, save, and run code Utilize builtin functions of Python/CircuitPython","title":"Goals"},{"location":"exercises/001-printing/#preparation","text":"Connect your board to the computer and open the code.py file. Delete any pre-existing code from the board. See getting started for help with this step.","title":"Preparation"},{"location":"exercises/001-printing/#concepts-vocabulary","text":"Calling functions print() argument(s)","title":"Concepts &amp; Vocabulary"},{"location":"exercises/001-printing/#background-info","text":"This is a very, very simple piece of code, but it'll be a great way to make sure you understand how to run code. Besides, you'll be using the print() function a lot, so I want to make sure you nderstand it! The term for using a function is \"calling\" a function. So for instance, we will call the print() function in this exercise. Remember that every function has an input, a process, and an output. A function call will start with the name of the function. In this case, the name is print . The name must always be followed by parentheses () for the input, even if you're not going to be putting anything inside them. If a function takes arguments , they go inside the parentheses. If there's more than one argument, you separate them with commas.","title":"Background Info"},{"location":"exercises/001-printing/#try-it","text":"Please take a moment to see if you can predict what this will do before you run the code. 1 2 3 4 5 6 print ( \"hello\" ) print ( \"hello world\" ) print ( \"a\" , \"b\" , \"c\" ) ' print ( 1 + 1 ) print ( \"1 + 1\" ) print ( \"1\" + \"1\" )","title":"Try It"},{"location":"exercises/001-printing/#show-me-your-code-in-action","text":"To get credit for this exercise, I will need to see your code running. This will be scored for completion. If I am not available to check your work when you're ready, make sure you use Save As to save a copy on your computer (not only on the board!) so you can continue on and show me the code running later.","title":"Show me your code in action"},{"location":"exercises/002-imports/","text":"Exercise 2 - Importing Modules Goals Open, edit, save, and run code Import modules to bring in additional functionality Preparation Connect your board to the computer and open the code.py file. Delete any pre-existing code from the board. See getting started for help with this step. Concepts & Vocabulary import module dir() Background Info Building on your printing exercise, let's take a look at the board the way the computer sees it. To complete this exercise, you're going to import the board module and print out the contents of the board. The board module is one we'll use a lot, because it saves us a lot of work. Not all boards are set up the same way - a built in LED might be on pin 12 on one board, pin 13 on another, and pin 4 on a third board. Instead of modifying the code everytime you use a different style of board, you can use board.LED to refer to that pin no matter what microcontroller pin it's actually on . The dir() function (which stands for directory ) will return (not print) a list all the contents of a folder or any other object in Python. Because it returns the list as a value, it can be used as an argument for another function, like the print function. Try It Look at the list that is printed out. Can you tell what any of these terms mean? code 1 2 3 import board print ( dir ( board )) output 1 2 3 4 5 6 7 Auto-reload is on. Simply save files over USB to run them or enter REPL to disable. code.py output: ['__class__', '__name__', 'A0', 'A1', 'A2', 'A3', 'GP0', 'GP1', 'GP10', 'GP11', 'GP12', 'GP13', 'GP14', 'GP15', 'GP16', 'GP17', 'GP18', 'GP19', 'GP2', 'GP20', 'GP21', 'GP22', 'GP23', 'GP24', 'GP25', 'GP26', 'GP26_A0', 'GP27', 'GP27_A1', 'GP28', 'GP28_A2', 'GP3', 'GP4', 'GP5', 'GP6', 'GP7', 'GP8', 'GP9', 'LED', 'SMPS_MODE', 'VBUS_SENSE', 'VOLTAGE_MONITOR', 'board_id'] Code done running. Press any key to enter the REPL. Use CTRL-D to reload. Show me your code in action To get credit for this exercise, I will need to see your code running. This will be scored for completion. If I am not available to check your work when you're ready, make sure you use Save As to save a copy on your computer (not only on the board!) so you can continue on and show me the code running later.","title":"002 - Imports"},{"location":"exercises/002-imports/#exercise-2-importing-modules","text":"","title":"Exercise 2 - Importing Modules"},{"location":"exercises/002-imports/#goals","text":"Open, edit, save, and run code Import modules to bring in additional functionality","title":"Goals"},{"location":"exercises/002-imports/#preparation","text":"Connect your board to the computer and open the code.py file. Delete any pre-existing code from the board. See getting started for help with this step.","title":"Preparation"},{"location":"exercises/002-imports/#concepts-vocabulary","text":"import module dir()","title":"Concepts &amp; Vocabulary"},{"location":"exercises/002-imports/#background-info","text":"Building on your printing exercise, let's take a look at the board the way the computer sees it. To complete this exercise, you're going to import the board module and print out the contents of the board. The board module is one we'll use a lot, because it saves us a lot of work. Not all boards are set up the same way - a built in LED might be on pin 12 on one board, pin 13 on another, and pin 4 on a third board. Instead of modifying the code everytime you use a different style of board, you can use board.LED to refer to that pin no matter what microcontroller pin it's actually on . The dir() function (which stands for directory ) will return (not print) a list all the contents of a folder or any other object in Python. Because it returns the list as a value, it can be used as an argument for another function, like the print function.","title":"Background Info"},{"location":"exercises/002-imports/#try-it","text":"Look at the list that is printed out. Can you tell what any of these terms mean? code 1 2 3 import board print ( dir ( board )) output 1 2 3 4 5 6 7 Auto-reload is on. Simply save files over USB to run them or enter REPL to disable. code.py output: ['__class__', '__name__', 'A0', 'A1', 'A2', 'A3', 'GP0', 'GP1', 'GP10', 'GP11', 'GP12', 'GP13', 'GP14', 'GP15', 'GP16', 'GP17', 'GP18', 'GP19', 'GP2', 'GP20', 'GP21', 'GP22', 'GP23', 'GP24', 'GP25', 'GP26', 'GP26_A0', 'GP27', 'GP27_A1', 'GP28', 'GP28_A2', 'GP3', 'GP4', 'GP5', 'GP6', 'GP7', 'GP8', 'GP9', 'LED', 'SMPS_MODE', 'VBUS_SENSE', 'VOLTAGE_MONITOR', 'board_id'] Code done running. Press any key to enter the REPL. Use CTRL-D to reload.","title":"Try It"},{"location":"exercises/002-imports/#show-me-your-code-in-action","text":"To get credit for this exercise, I will need to see your code running. This will be scored for completion. If I am not available to check your work when you're ready, make sure you use Save As to save a copy on your computer (not only on the board!) so you can continue on and show me the code running later.","title":"Show me your code in action"},{"location":"exercises/003-digitalio/","text":"Exercise 3 - DigitalIO Goals Import modules to bring in additional functionality Work with the digitalio library Utilize digital outputs to control an LED Preparation Connect your board to the computer and open the code.py or main.py file. Whichever one you have is fine but I'll be referring to it as code.py . Delete any pre-existing code from the board. See getting started for help with this step. We'll be running code from a python file today Concepts & Vocabulary board (module) time (module) digitalio (module) input output dot notation Background Info Okay, we're finally going to make something happen that you can see in the real world! We have several different boards in use right now, but all of them have a bulit in LED - that's an LED that's soldered directly onto the board and already connected correctly to the microcontroller. These are great for troubleshooting, because there's no chance of you wiring things up wrong. We'll do this in a few stages. Try It Part 1 - Imports Save and run this version of the code. There's an explanation below! 1 2 3 4 # Import necessary libaries import board import digitalio import time What you should see: The board should reboot, run the code, and print out a message that it's done running. Make sure you don't get any errors, though! The reason we're running this code a little at a time is because I want you to go through the process in the right way - if you write the code all at once, it's harder to spot errors and harder to formulate what to do. What this does: This imports modules for working with the board, working with digital inputs and outputs, and working with time into the code. Part 2 - Creating a Digital Output Save and run this version of the code. Only the code below the line of asterisks ****** is new. There's an explanation below! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Import necessary libaries import board import digitalio import time # ************************************** # # create a new DigitalIO object connected to whatever pin the board's built in LED is attached to. # Assign this to a variable so we can refer to it again led = digitalio . DigitalInOut ( board . LED ) # Set our new DigitalIO object to be an output led . direction = digitalio . Direction . OUTPUT # Print the value of the LED print ( led . value ) What you should see: The board should reboot, run the code, and print out a message that it's done running. In the serial console , you should see it print either True or False . Make sure you don't have any errors. Nothing will light up yet. What this does: The comments explain this too, but here you go: - The first new line of code creates a DigitalIO object. We have to tell it what pin we're using, but instead of giving it a pin number (which we could do, but will vary between boards), we tell it to go look up the definition in the board module and use whatever pin the built in LED is attached to - The second new line of code sets this DigitalIO object to be an OUTPUT so it can send signals - The third new line of code will print out the value assigned to the LED. True will turn it on, False will turn it off Part 3 - Turning on the LED Save and run this version of the code. Only the code below the line of asterisks ****** is new. There's an explanation below! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # Import necessary libaries import board import digitalio import time # create a new DigitalIO object connected to whatever pin the board's built in LED is attached to. # Assign this to a variable so we can refer to it again led = digitalio . DigitalInOut ( board . LED ) # Set our new DigitalIO object to be an output led . direction = digitalio . Direction . OUTPUT # Print the value of the LED print ( led . value ) # ************************************** # # Set the LED's value to True to turn it on led . value = True # Print the value of the LED print ( led . value ) What you should see: In the serial console , you should see it print either True or False , and then on the next line, it should print True , which is the value we assigned to led.value. Make sure you don't have any errors. You won't see anything lighting up, though! What this does: We set the LED's value to True to turn it on Question Why do you think you didn't see the LED turn on? Part 4 - Delay! Save and run this version of the code. Only the code below the line of asterisks ****** is new. There's an explanation below! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # Import necessary libaries import board import digitalio import time # create a new DigitalIO object connected to whatever pin the board's built in LED is attached to. # Assign this to a variable so we can refer to it again led = digitalio . DigitalInOut ( board . LED ) # Set our new DigitalIO object to be an output led . direction = digitalio . Direction . OUTPUT # Print the value of the LED print ( led . value ) # Set the LED's value to True to turn it on led . value = True # Print the value of the LED print ( led . value ) # ************************************** # time . sleep ( 5 ) What you should see: In the serial console , you should see it print either True or False , and then on the next line, it should print True , which is the value we assigned to led.value. Make sure you don't have any errors. You should also see the LED light up for 5 seconds! What this does: We told the board to pause for 5 seconds after turning the LED on Question How could you turn the LED off and on again? Show me your code in action Total of 5 points 5 points: You made your LED blink repeatedly 4.5 points: You made your LED change at least twice 4 points: Your LED turns on 3 points: You set up your LED but it doesn't turn on 0 points: You didn't get a meaningful amount of this code completed","title":"003 - DigitalIO"},{"location":"exercises/003-digitalio/#exercise-3-digitalio","text":"","title":"Exercise 3 - DigitalIO"},{"location":"exercises/003-digitalio/#goals","text":"Import modules to bring in additional functionality Work with the digitalio library Utilize digital outputs to control an LED","title":"Goals"},{"location":"exercises/003-digitalio/#preparation","text":"Connect your board to the computer and open the code.py or main.py file. Whichever one you have is fine but I'll be referring to it as code.py . Delete any pre-existing code from the board. See getting started for help with this step. We'll be running code from a python file today","title":"Preparation"},{"location":"exercises/003-digitalio/#concepts-vocabulary","text":"board (module) time (module) digitalio (module) input output dot notation","title":"Concepts &amp; Vocabulary"},{"location":"exercises/003-digitalio/#background-info","text":"Okay, we're finally going to make something happen that you can see in the real world! We have several different boards in use right now, but all of them have a bulit in LED - that's an LED that's soldered directly onto the board and already connected correctly to the microcontroller. These are great for troubleshooting, because there's no chance of you wiring things up wrong. We'll do this in a few stages.","title":"Background Info"},{"location":"exercises/003-digitalio/#try-it","text":"","title":"Try It"},{"location":"exercises/003-digitalio/#part-1-imports","text":"Save and run this version of the code. There's an explanation below! 1 2 3 4 # Import necessary libaries import board import digitalio import time What you should see: The board should reboot, run the code, and print out a message that it's done running. Make sure you don't get any errors, though! The reason we're running this code a little at a time is because I want you to go through the process in the right way - if you write the code all at once, it's harder to spot errors and harder to formulate what to do. What this does: This imports modules for working with the board, working with digital inputs and outputs, and working with time into the code.","title":"Part 1 - Imports"},{"location":"exercises/003-digitalio/#part-2-creating-a-digital-output","text":"Save and run this version of the code. Only the code below the line of asterisks ****** is new. There's an explanation below! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Import necessary libaries import board import digitalio import time # ************************************** # # create a new DigitalIO object connected to whatever pin the board's built in LED is attached to. # Assign this to a variable so we can refer to it again led = digitalio . DigitalInOut ( board . LED ) # Set our new DigitalIO object to be an output led . direction = digitalio . Direction . OUTPUT # Print the value of the LED print ( led . value ) What you should see: The board should reboot, run the code, and print out a message that it's done running. In the serial console , you should see it print either True or False . Make sure you don't have any errors. Nothing will light up yet. What this does: The comments explain this too, but here you go: - The first new line of code creates a DigitalIO object. We have to tell it what pin we're using, but instead of giving it a pin number (which we could do, but will vary between boards), we tell it to go look up the definition in the board module and use whatever pin the built in LED is attached to - The second new line of code sets this DigitalIO object to be an OUTPUT so it can send signals - The third new line of code will print out the value assigned to the LED. True will turn it on, False will turn it off","title":"Part 2 - Creating a Digital Output"},{"location":"exercises/003-digitalio/#part-3-turning-on-the-led","text":"Save and run this version of the code. Only the code below the line of asterisks ****** is new. There's an explanation below! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # Import necessary libaries import board import digitalio import time # create a new DigitalIO object connected to whatever pin the board's built in LED is attached to. # Assign this to a variable so we can refer to it again led = digitalio . DigitalInOut ( board . LED ) # Set our new DigitalIO object to be an output led . direction = digitalio . Direction . OUTPUT # Print the value of the LED print ( led . value ) # ************************************** # # Set the LED's value to True to turn it on led . value = True # Print the value of the LED print ( led . value ) What you should see: In the serial console , you should see it print either True or False , and then on the next line, it should print True , which is the value we assigned to led.value. Make sure you don't have any errors. You won't see anything lighting up, though! What this does: We set the LED's value to True to turn it on Question Why do you think you didn't see the LED turn on?","title":"Part 3 - Turning on the LED"},{"location":"exercises/003-digitalio/#part-4-delay","text":"Save and run this version of the code. Only the code below the line of asterisks ****** is new. There's an explanation below! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # Import necessary libaries import board import digitalio import time # create a new DigitalIO object connected to whatever pin the board's built in LED is attached to. # Assign this to a variable so we can refer to it again led = digitalio . DigitalInOut ( board . LED ) # Set our new DigitalIO object to be an output led . direction = digitalio . Direction . OUTPUT # Print the value of the LED print ( led . value ) # Set the LED's value to True to turn it on led . value = True # Print the value of the LED print ( led . value ) # ************************************** # time . sleep ( 5 ) What you should see: In the serial console , you should see it print either True or False , and then on the next line, it should print True , which is the value we assigned to led.value. Make sure you don't have any errors. You should also see the LED light up for 5 seconds! What this does: We told the board to pause for 5 seconds after turning the LED on Question How could you turn the LED off and on again?","title":"Part 4 - Delay!"},{"location":"exercises/003-digitalio/#show-me-your-code-in-action","text":"Total of 5 points 5 points: You made your LED blink repeatedly 4.5 points: You made your LED change at least twice 4 points: Your LED turns on 3 points: You set up your LED but it doesn't turn on 0 points: You didn't get a meaningful amount of this code completed","title":"Show me your code in action"},{"location":"exercises/004-blink-pattern/","text":"Exercise 4 - Blink Pattern Goals Work with the digitalio library Utilize digital outputs to control an LED Utilize loops to accomplish repetitive tasks Preparation Connect your board to the computer and open the code.py or main.py file. Whichever one you have is fine but I'll be referring to it as code.py . Delete any pre-existing code from the board. See getting started for help with this step. We'll be running code from a python file today Concepts & Vocabulary for loop while loop setup range() New Programming Syntax 1 2 3 4 5 6 7 8 9 10 11 # range(max) range ( 5 ) # outputs a range of numbers => 0, 1, 2, 3, 4 # range(min, max) range ( - 3 , 3 ) # outputs a range of numbers => -3, -2, -1, 0, 1, 2 # range(min, max, step) range ( - 200 , 100 , 50 ) # outputs (returns) a range of numbers => -200, -150, -100, -50, 0, 50 The range function is used to generate a series of numbers, and is often combined with a for loop 1 2 3 4 5 6 # for loops will repeat a set number of times, or for a set of objects for n in range ( 5 ): # inside the loop, we have a variable called n # n is going to be assigned 0 at first, then 1 on the next loop, and so on until 4 # after n = 4, the loop will not continue running, because we've reached the end of the range print ( n ) The for loop above will print the following in the serial console : 1 2 3 4 5 0 1 2 3 4 Background Info For this one, we're going to create a blinking pattern. Using the for loop we covered in class, create a pattern of blinking lights that changes over time. For instance, you might have it turn on for 1 second, then 2 seconds, then 3 seconds, and so on. Try It All of the code you need for this comes from exercise 3 and from the for loops above. We'll go over it in class too. Show me your code in action Total of 5 points 5 points: You created a for loop to blink in a pattern utilizing the variable that controls the loop 4 points: You created a for loop to blink your LED, but didn't utilize the variable 3 points: You set up your LED but didn't blink it 0 points: You didn't get a meaningful amount of this code completed","title":"004 - Blink Pattern"},{"location":"exercises/004-blink-pattern/#exercise-4-blink-pattern","text":"","title":"Exercise 4 - Blink Pattern"},{"location":"exercises/004-blink-pattern/#goals","text":"Work with the digitalio library Utilize digital outputs to control an LED Utilize loops to accomplish repetitive tasks","title":"Goals"},{"location":"exercises/004-blink-pattern/#preparation","text":"Connect your board to the computer and open the code.py or main.py file. Whichever one you have is fine but I'll be referring to it as code.py . Delete any pre-existing code from the board. See getting started for help with this step. We'll be running code from a python file today","title":"Preparation"},{"location":"exercises/004-blink-pattern/#concepts-vocabulary","text":"for loop while loop setup range()","title":"Concepts &amp; Vocabulary"},{"location":"exercises/004-blink-pattern/#new-programming-syntax","text":"1 2 3 4 5 6 7 8 9 10 11 # range(max) range ( 5 ) # outputs a range of numbers => 0, 1, 2, 3, 4 # range(min, max) range ( - 3 , 3 ) # outputs a range of numbers => -3, -2, -1, 0, 1, 2 # range(min, max, step) range ( - 200 , 100 , 50 ) # outputs (returns) a range of numbers => -200, -150, -100, -50, 0, 50 The range function is used to generate a series of numbers, and is often combined with a for loop 1 2 3 4 5 6 # for loops will repeat a set number of times, or for a set of objects for n in range ( 5 ): # inside the loop, we have a variable called n # n is going to be assigned 0 at first, then 1 on the next loop, and so on until 4 # after n = 4, the loop will not continue running, because we've reached the end of the range print ( n ) The for loop above will print the following in the serial console : 1 2 3 4 5 0 1 2 3 4","title":"New Programming Syntax"},{"location":"exercises/004-blink-pattern/#background-info","text":"For this one, we're going to create a blinking pattern. Using the for loop we covered in class, create a pattern of blinking lights that changes over time. For instance, you might have it turn on for 1 second, then 2 seconds, then 3 seconds, and so on.","title":"Background Info"},{"location":"exercises/004-blink-pattern/#try-it","text":"All of the code you need for this comes from exercise 3 and from the for loops above. We'll go over it in class too.","title":"Try It"},{"location":"exercises/004-blink-pattern/#show-me-your-code-in-action","text":"Total of 5 points 5 points: You created a for loop to blink in a pattern utilizing the variable that controls the loop 4 points: You created a for loop to blink your LED, but didn't utilize the variable 3 points: You set up your LED but didn't blink it 0 points: You didn't get a meaningful amount of this code completed","title":"Show me your code in action"},{"location":"exercises/005-addressable-rgb/","text":"Exercise 5 - Addressable RGB LEDs Goals Work with the dotstar or neopixel library Work with more complex data types Comment out code to control which sections of code run Utilize loops to accomplish repetitive tasks Preparation Connect your board to the computer and open the main.py file. Please make sure you're opening the one on your board, not a copy saved on your computer! See getting started for help with this step. We'll be running code from a python file today To make sure you're working with the correct file, add a print function to your code (for instance, print(\"It's time to play with LEDs\") ) and make sure it runs After you've done that, please copy and paste the sample code below to your main.py file Concepts & Vocabulary tuple addressable RGB LED commenting out code Starting Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \"\"\"CircuitPython Essentials Internal RGB LED red, green, blue example\"\"\" import time import board # For Trinket M0, Gemma M0, ItsyBitsy M0 Express, and ItsyBitsy M4 Express # (1) # import adafruit_dotstar # led = adafruit_dotstar.DotStar(board.APA102_SCK, board.APA102_MOSI, 1) # For Feather M0 Express, Metro M0 Express, Metro M4 Express, Circuit Playground Express, QT Py M0 # import neopixel # led = neopixel.NeoPixel(board.NEOPIXEL, 1) led . brightness = 0.3 #(2) while True : #(3) led [ 0 ] = ( 255 , 0 , 0 ) #(4) time . sleep ( 0.5 ) led [ 0 ] = ( 0 , 255 , 0 ) time . sleep ( 0.5 ) led [ 0 ] = ( 0 , 0 , 255 ) time . sleep ( 0.5 ) You're going to need to comment out one of the two pairs of lines here, depending on which board you have You can set this to any value from 0 to 1. Try other values! This loop will run forever. Could you change it to run 5 times? Try it! This sets the first LED in the chain to red. Could you make it orange instead? Try It Modify the code above to change the pattern of colors it shows Show me your code in action Today, I'm just checking for completion. You'll have another assignment to show me more advanced usage","title":"005 - Addressable LED"},{"location":"exercises/005-addressable-rgb/#exercise-5-addressable-rgb-leds","text":"","title":"Exercise 5 - Addressable RGB LEDs"},{"location":"exercises/005-addressable-rgb/#goals","text":"Work with the dotstar or neopixel library Work with more complex data types Comment out code to control which sections of code run Utilize loops to accomplish repetitive tasks","title":"Goals"},{"location":"exercises/005-addressable-rgb/#preparation","text":"Connect your board to the computer and open the main.py file. Please make sure you're opening the one on your board, not a copy saved on your computer! See getting started for help with this step. We'll be running code from a python file today To make sure you're working with the correct file, add a print function to your code (for instance, print(\"It's time to play with LEDs\") ) and make sure it runs After you've done that, please copy and paste the sample code below to your main.py file","title":"Preparation"},{"location":"exercises/005-addressable-rgb/#concepts-vocabulary","text":"tuple addressable RGB LED commenting out code","title":"Concepts &amp; Vocabulary"},{"location":"exercises/005-addressable-rgb/#starting-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \"\"\"CircuitPython Essentials Internal RGB LED red, green, blue example\"\"\" import time import board # For Trinket M0, Gemma M0, ItsyBitsy M0 Express, and ItsyBitsy M4 Express # (1) # import adafruit_dotstar # led = adafruit_dotstar.DotStar(board.APA102_SCK, board.APA102_MOSI, 1) # For Feather M0 Express, Metro M0 Express, Metro M4 Express, Circuit Playground Express, QT Py M0 # import neopixel # led = neopixel.NeoPixel(board.NEOPIXEL, 1) led . brightness = 0.3 #(2) while True : #(3) led [ 0 ] = ( 255 , 0 , 0 ) #(4) time . sleep ( 0.5 ) led [ 0 ] = ( 0 , 255 , 0 ) time . sleep ( 0.5 ) led [ 0 ] = ( 0 , 0 , 255 ) time . sleep ( 0.5 ) You're going to need to comment out one of the two pairs of lines here, depending on which board you have You can set this to any value from 0 to 1. Try other values! This loop will run forever. Could you change it to run 5 times? Try it! This sets the first LED in the chain to red. Could you make it orange instead?","title":"Starting Code"},{"location":"exercises/005-addressable-rgb/#try-it","text":"Modify the code above to change the pattern of colors it shows","title":"Try It"},{"location":"exercises/005-addressable-rgb/#show-me-your-code-in-action","text":"Today, I'm just checking for completion. You'll have another assignment to show me more advanced usage","title":"Show me your code in action"},{"location":"exercises/006-colors/","text":"Exercise 6 - Working With Colors Goals Work with the dotstar or neopixel library Work with more complex data types Create variables/constants to make code more managable Work with RGB Color Preparation Connect your board to the computer and open the main.py file. Please make sure you're opening the one on your board, not a copy saved on your computer! See getting started for help with this step. We'll be running code from a python file today Please start off by configuring and running the test code below to check that you have red-green-blue flashing lights Concepts & Vocabulary tuple RGB color constants Test Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \"\"\"CircuitPython Essentials Internal RGB LED red, green, blue example\"\"\" import time import board # For Trinket M0, Gemma M0, ItsyBitsy M0 Express, and ItsyBitsy M4 Express # (1) # import adafruit_dotstar # led = adafruit_dotstar.DotStar(board.APA102_SCK, board.APA102_MOSI, 1) # For Feather M0 Express, Metro M0 Express, Metro M4 Express, Circuit Playground Express, QT Py M0 # import neopixel # led = neopixel.NeoPixel(board.NEOPIXEL, 1) led . brightness = 0.3 #(2) #### Everything above this line is setup code that won't change when you do the assignment below #### while True : led [ 0 ] = ( 255 , 0 , 0 ) time . sleep ( 0.5 ) led [ 0 ] = ( 0 , 255 , 0 ) time . sleep ( 0.5 ) led [ 0 ] = ( 0 , 0 , 255 ) time . sleep ( 0.5 ) You're going to need to comment out one of the two pairs of lines here, depending on which board you have You can set this to any value from 0 to 1. Try other values! Defining Colors For today's exercise, you're going to need to make a pattern of at least 5 colors. That's going to start getting hard to read, though, so let's look at how we can improve this a bit. How the NeoPixel and DotStar modules read colors When working with these two modules, you will always give colors as a set of RGB values, but you also need to make them a single value. That's where tuples come in! A tuple is a lot like a list, in that it is a single value that has multiple values inside it. The difference is that unlike a list, it can't be changed once it's created. It looks like (255, 0, 0) (the spaces in between the comma and number are optional). You can also use hex values, which look like #ff0000 . Either way, the range you'll use is 0-255 (or the hexadecimal equivalent if you're using hex values, which would be #00 to #ff ). You can use a color picker to figure out what values you want for a color, although you may have to tweak them to get them to look right on the LED. Constants You already know about variables. For instance, a = 5 is an assignment statement that assigns the value 5 to the variable a . After that, you can use a to represent the value assigned to it. You can also modify the value assigned to a. For instance: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 a = 5 b = 6 c = a + b print ( \"a is:\" , a ) print ( \"b is:\" , b ) print ( \"c is:\" , c ) print ( f \" { a } + { b } = { c } \" ) a = 7 print ( \"a is:\" , a ) print ( \"b is:\" , b ) print ( \"c is:\" , c ) print ( f \" { a } + { b } = { c } \" ) When run in CircuitPython, the code above should produce: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 soft reboot Auto-reload is on. Simply save files over USB to run them or enter REPL to disable. code.py output: a is: 5 b is: 6 c is: 11 5 + 6 = 11 a is: 7 b is: 6 c is: 11 7 + 6 = 11 Code done running. Press any key to enter the REPL. Use CTRL-D to reload. In some languages, you can define a variable that isn't allowed to change, and this is called a constant . You probably know constants from math or science classes. For instance: pi or the speed of light are known values that we can refer to by a name, but they don't change. This can be useful in your code too. If you wanted to define what \"red\" is, you might create a constant because the value of red shouldn't be changing while the program runs. In Python, you can't create a true constant, but the convention in Python is to make the name of a variable that is being used as a constant in ALL CAPS. For instance, you might have a color defined like this: 1 RED = ( 255 , 0 , 0 ) Why? It's going to start getting hard to maintain your code if you're writing the colors in manually every time you need them, especially when we start doing some longer examples. Using variables to represent colors will make your life easier, and will also help you get ready to work with lists of colors and fading between colors Try It Modify the sample code below so it works. You'll need to define variables/constants for colors. You may change the patern of colors it shows. Don't forget to uncomment the right section of code for your particular board! If you want to change the pattern it's showing, that's fine 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 import time import board # For Trinket M0, Gemma M0, ItsyBitsy M0 Express, and ItsyBitsy M4 Express # (1) # import adafruit_dotstar # led = adafruit_dotstar.DotStar(board.APA102_SCK, board.APA102_MOSI, 1) # For Feather M0 Express, Metro M0 Express, Metro M4 Express, Circuit Playground Express, QT Py M0 # import neopixel # led = neopixel.NeoPixel(board.NEOPIXEL, 1) led . brightness = 0.3 #(2) #### Everything above this line is setup code that works exactly the same as the test code #### #### You can just copy and paste the code below this line to replace the loop in the test code #### # Define your colors #(3) # Don't forget to define variables for the colors! This would be a good place to do that. # Have you defined your colors yet? while True : led [ 0 ] = RED time . sleep ( 0.5 ) led [ 0 ] = ORANGE time . sleep ( 0.5 ) led [ 0 ] = YELLOW time . sleep ( 0.5 ) led [ 0 ] = GREEN time . sleep ( 0.5 ) led [ 0 ] = BLUE time . sleep ( 0.5 ) led [ 0 ] = PURPLE time . sleep ( 0.5 ) led [ 0 ] = PINK time . sleep ( 0.5 ) You're going to need to comment out one of the two pairs of lines here, depending on which board you have You can set this to any value from 0 to 1. Try other values! Remember you can define them just like any other variable. See above for an example Show me your code in action Today, I'm just checking for completion and for the presence of named colors. You'll have another assignment to show me more advanced usage","title":"006 - Working with Colors"},{"location":"exercises/006-colors/#exercise-6-working-with-colors","text":"","title":"Exercise 6 - Working With Colors"},{"location":"exercises/006-colors/#goals","text":"Work with the dotstar or neopixel library Work with more complex data types Create variables/constants to make code more managable Work with RGB Color","title":"Goals"},{"location":"exercises/006-colors/#preparation","text":"Connect your board to the computer and open the main.py file. Please make sure you're opening the one on your board, not a copy saved on your computer! See getting started for help with this step. We'll be running code from a python file today Please start off by configuring and running the test code below to check that you have red-green-blue flashing lights","title":"Preparation"},{"location":"exercises/006-colors/#concepts-vocabulary","text":"tuple RGB color constants","title":"Concepts &amp; Vocabulary"},{"location":"exercises/006-colors/#test-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \"\"\"CircuitPython Essentials Internal RGB LED red, green, blue example\"\"\" import time import board # For Trinket M0, Gemma M0, ItsyBitsy M0 Express, and ItsyBitsy M4 Express # (1) # import adafruit_dotstar # led = adafruit_dotstar.DotStar(board.APA102_SCK, board.APA102_MOSI, 1) # For Feather M0 Express, Metro M0 Express, Metro M4 Express, Circuit Playground Express, QT Py M0 # import neopixel # led = neopixel.NeoPixel(board.NEOPIXEL, 1) led . brightness = 0.3 #(2) #### Everything above this line is setup code that won't change when you do the assignment below #### while True : led [ 0 ] = ( 255 , 0 , 0 ) time . sleep ( 0.5 ) led [ 0 ] = ( 0 , 255 , 0 ) time . sleep ( 0.5 ) led [ 0 ] = ( 0 , 0 , 255 ) time . sleep ( 0.5 ) You're going to need to comment out one of the two pairs of lines here, depending on which board you have You can set this to any value from 0 to 1. Try other values!","title":"Test Code"},{"location":"exercises/006-colors/#defining-colors","text":"For today's exercise, you're going to need to make a pattern of at least 5 colors. That's going to start getting hard to read, though, so let's look at how we can improve this a bit.","title":"Defining Colors"},{"location":"exercises/006-colors/#how-the-neopixel-and-dotstar-modules-read-colors","text":"When working with these two modules, you will always give colors as a set of RGB values, but you also need to make them a single value. That's where tuples come in! A tuple is a lot like a list, in that it is a single value that has multiple values inside it. The difference is that unlike a list, it can't be changed once it's created. It looks like (255, 0, 0) (the spaces in between the comma and number are optional). You can also use hex values, which look like #ff0000 . Either way, the range you'll use is 0-255 (or the hexadecimal equivalent if you're using hex values, which would be #00 to #ff ). You can use a color picker to figure out what values you want for a color, although you may have to tweak them to get them to look right on the LED.","title":"How the NeoPixel and DotStar modules read colors"},{"location":"exercises/006-colors/#constants","text":"You already know about variables. For instance, a = 5 is an assignment statement that assigns the value 5 to the variable a . After that, you can use a to represent the value assigned to it. You can also modify the value assigned to a. For instance: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 a = 5 b = 6 c = a + b print ( \"a is:\" , a ) print ( \"b is:\" , b ) print ( \"c is:\" , c ) print ( f \" { a } + { b } = { c } \" ) a = 7 print ( \"a is:\" , a ) print ( \"b is:\" , b ) print ( \"c is:\" , c ) print ( f \" { a } + { b } = { c } \" ) When run in CircuitPython, the code above should produce: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 soft reboot Auto-reload is on. Simply save files over USB to run them or enter REPL to disable. code.py output: a is: 5 b is: 6 c is: 11 5 + 6 = 11 a is: 7 b is: 6 c is: 11 7 + 6 = 11 Code done running. Press any key to enter the REPL. Use CTRL-D to reload. In some languages, you can define a variable that isn't allowed to change, and this is called a constant . You probably know constants from math or science classes. For instance: pi or the speed of light are known values that we can refer to by a name, but they don't change. This can be useful in your code too. If you wanted to define what \"red\" is, you might create a constant because the value of red shouldn't be changing while the program runs. In Python, you can't create a true constant, but the convention in Python is to make the name of a variable that is being used as a constant in ALL CAPS. For instance, you might have a color defined like this: 1 RED = ( 255 , 0 , 0 )","title":"Constants"},{"location":"exercises/006-colors/#why","text":"It's going to start getting hard to maintain your code if you're writing the colors in manually every time you need them, especially when we start doing some longer examples. Using variables to represent colors will make your life easier, and will also help you get ready to work with lists of colors and fading between colors","title":"Why?"},{"location":"exercises/006-colors/#try-it","text":"Modify the sample code below so it works. You'll need to define variables/constants for colors. You may change the patern of colors it shows. Don't forget to uncomment the right section of code for your particular board! If you want to change the pattern it's showing, that's fine 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 import time import board # For Trinket M0, Gemma M0, ItsyBitsy M0 Express, and ItsyBitsy M4 Express # (1) # import adafruit_dotstar # led = adafruit_dotstar.DotStar(board.APA102_SCK, board.APA102_MOSI, 1) # For Feather M0 Express, Metro M0 Express, Metro M4 Express, Circuit Playground Express, QT Py M0 # import neopixel # led = neopixel.NeoPixel(board.NEOPIXEL, 1) led . brightness = 0.3 #(2) #### Everything above this line is setup code that works exactly the same as the test code #### #### You can just copy and paste the code below this line to replace the loop in the test code #### # Define your colors #(3) # Don't forget to define variables for the colors! This would be a good place to do that. # Have you defined your colors yet? while True : led [ 0 ] = RED time . sleep ( 0.5 ) led [ 0 ] = ORANGE time . sleep ( 0.5 ) led [ 0 ] = YELLOW time . sleep ( 0.5 ) led [ 0 ] = GREEN time . sleep ( 0.5 ) led [ 0 ] = BLUE time . sleep ( 0.5 ) led [ 0 ] = PURPLE time . sleep ( 0.5 ) led [ 0 ] = PINK time . sleep ( 0.5 ) You're going to need to comment out one of the two pairs of lines here, depending on which board you have You can set this to any value from 0 to 1. Try other values! Remember you can define them just like any other variable. See above for an example","title":"Try It"},{"location":"exercises/006-colors/#show-me-your-code-in-action","text":"Today, I'm just checking for completion and for the presence of named colors. You'll have another assignment to show me more advanced usage","title":"Show me your code in action"},{"location":"exercises/007-stepping-between-values/","text":"Exercise 7 - Stepping Between Values Goals Work with the dotstar or neopixel library Work with more complex data types Create variables/constants to make code more managable Work with RGB color Iterate through loops to change gradually from a start point to an end point Preparation Connect your board to the computer and open the main.py file. Please make sure you're opening the one on your board, not a copy saved on your computer! See getting started for help with this step. We'll be running code from a python file today Please start off by configuring and running the test code below to check that you have red-green-blue flashing lights Concepts & Vocabulary Loops Iteration Interpolation Test Code Please configure and run the test code to make sure everything is working correctly. I promise this isn't to make more work for you! We've had a lot of people run into problems like modules getting deleted by accident or editing a file on their computer instead of the one on the board, so this is a quick diagnostic exercise I'll ask you to run at the start of each class. I've also added a print function below - the purpose of this is for you to change the string inside it to something recognizable (like your name). If you don't see this line print, then this isn't the code that's running on your board! Don't forget that the getting started page has a checklist you can use to help you get your board set up correctly. Testing Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \"\"\"Adapted from CircuitPython Essentials Internal RGB LED red, green, blue example\"\"\" import time import board # For Trinket M0, Gemma M0, ItsyBitsy M0 Express, and ItsyBitsy M4 Express # (1) # import adafruit_dotstar # led = adafruit_dotstar.DotStar(board.APA102_SCK, board.APA102_MOSI, 1) # For Feather M0 Express, Metro M0 Express, Metro M4 Express, Circuit Playground Express, QT Py M0 # import neopixel # led = neopixel.NeoPixel(board.NEOPIXEL, 1) led . brightness = 0.3 #(2) #### Everything above this line is setup code that won't change when you do the assignment below #### print ( \"CHANGE THIS TO YOUR NAME OR SOMETHING ELSE SPECIFIC TO YOU\" ) # (3) while True : led [ 0 ] = ( 255 , 0 , 0 ) time . sleep ( 0.5 ) led [ 0 ] = ( 0 , 255 , 0 ) time . sleep ( 0.5 ) led [ 0 ] = ( 0 , 0 , 255 ) time . sleep ( 0.5 ) You're going to need to comment out one of the two pairs of lines here, depending on which board you have You can set this to any value from 0 to 1. Try other values! Please make sure you change what this is printing! This line is a diagnostic line to make sure that the code running on your board is the code you think it is Stepping Between Values Often, you'll need your code to be able to go smoothly from one value to another. A few examples: - When you're in a car, you accelerate from stopped to going full speed, and brake gradually when you come to a stop - With LEDs, you might want to blend smoothly from one color to another - If you had a robotic arm, you'd want to be able to have positions between fully closed and fully opened. Code Snippets from the Presentation 1 2 3 4 5 6 7 start = 500 #(1) end = 800 n = start while n < end : #(2) print ( n ) n += 1 You could change these start and end values to be whatever you wanted How could you change this so you include the end value? 1 2 3 4 5 start = 500 #(1) end = 800 for n in range ( start , end ): print ( n ) You could change these start and end values to be whatever you wanted 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 ############ Assume all necessary setup for the internal RGB LED has been done above this line ############# ####### led refers to an object set up using the appropriate library to control the built in RGB LED ####### blue = ( 0 , 0 , 255 ) magenta = ( 255 , 0 , 255 ) red = ( 255 , 0 , 0 ) # fade from blue to magenta for n in range ( 0 , 256 , 1 ): led [ 0 ] = ( n , 0 , 255 ) time . sleep ( .05 ) # fade from magenta to red # (255, 0, 255) => (255, 0, 0) for n in range ( 255 , - 1 , - 1 ): led [ 0 ] = ( 255 , 0 , n ) time . sleep ( .1 ) Try It Based on what we covered in the slides, demonstrate the ability to fade between colors. Show me your code in action 5 points: Your RGB LED fades smoothly from red => green => blue => red or a pattern of similar difficulty 4.5 points: Your RGB LED fades smoothly between at least two different sets of colors 4 points: Your RGB LED is able to fade smoothly at least once 3 points: You can change colors in multiple steps, but it is not coded in a way that makes sense","title":"007 - Stepping Between Values"},{"location":"exercises/007-stepping-between-values/#exercise-7-stepping-between-values","text":"","title":"Exercise 7 - Stepping Between Values"},{"location":"exercises/007-stepping-between-values/#goals","text":"Work with the dotstar or neopixel library Work with more complex data types Create variables/constants to make code more managable Work with RGB color Iterate through loops to change gradually from a start point to an end point","title":"Goals"},{"location":"exercises/007-stepping-between-values/#preparation","text":"Connect your board to the computer and open the main.py file. Please make sure you're opening the one on your board, not a copy saved on your computer! See getting started for help with this step. We'll be running code from a python file today Please start off by configuring and running the test code below to check that you have red-green-blue flashing lights","title":"Preparation"},{"location":"exercises/007-stepping-between-values/#concepts-vocabulary","text":"Loops Iteration Interpolation","title":"Concepts &amp; Vocabulary"},{"location":"exercises/007-stepping-between-values/#test-code","text":"Please configure and run the test code to make sure everything is working correctly. I promise this isn't to make more work for you! We've had a lot of people run into problems like modules getting deleted by accident or editing a file on their computer instead of the one on the board, so this is a quick diagnostic exercise I'll ask you to run at the start of each class. I've also added a print function below - the purpose of this is for you to change the string inside it to something recognizable (like your name). If you don't see this line print, then this isn't the code that's running on your board! Don't forget that the getting started page has a checklist you can use to help you get your board set up correctly. Testing Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \"\"\"Adapted from CircuitPython Essentials Internal RGB LED red, green, blue example\"\"\" import time import board # For Trinket M0, Gemma M0, ItsyBitsy M0 Express, and ItsyBitsy M4 Express # (1) # import adafruit_dotstar # led = adafruit_dotstar.DotStar(board.APA102_SCK, board.APA102_MOSI, 1) # For Feather M0 Express, Metro M0 Express, Metro M4 Express, Circuit Playground Express, QT Py M0 # import neopixel # led = neopixel.NeoPixel(board.NEOPIXEL, 1) led . brightness = 0.3 #(2) #### Everything above this line is setup code that won't change when you do the assignment below #### print ( \"CHANGE THIS TO YOUR NAME OR SOMETHING ELSE SPECIFIC TO YOU\" ) # (3) while True : led [ 0 ] = ( 255 , 0 , 0 ) time . sleep ( 0.5 ) led [ 0 ] = ( 0 , 255 , 0 ) time . sleep ( 0.5 ) led [ 0 ] = ( 0 , 0 , 255 ) time . sleep ( 0.5 ) You're going to need to comment out one of the two pairs of lines here, depending on which board you have You can set this to any value from 0 to 1. Try other values! Please make sure you change what this is printing! This line is a diagnostic line to make sure that the code running on your board is the code you think it is","title":"Test Code"},{"location":"exercises/007-stepping-between-values/#stepping-between-values","text":"Often, you'll need your code to be able to go smoothly from one value to another. A few examples: - When you're in a car, you accelerate from stopped to going full speed, and brake gradually when you come to a stop - With LEDs, you might want to blend smoothly from one color to another - If you had a robotic arm, you'd want to be able to have positions between fully closed and fully opened.","title":"Stepping Between Values"},{"location":"exercises/007-stepping-between-values/#code-snippets-from-the-presentation","text":"1 2 3 4 5 6 7 start = 500 #(1) end = 800 n = start while n < end : #(2) print ( n ) n += 1 You could change these start and end values to be whatever you wanted How could you change this so you include the end value? 1 2 3 4 5 start = 500 #(1) end = 800 for n in range ( start , end ): print ( n ) You could change these start and end values to be whatever you wanted 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 ############ Assume all necessary setup for the internal RGB LED has been done above this line ############# ####### led refers to an object set up using the appropriate library to control the built in RGB LED ####### blue = ( 0 , 0 , 255 ) magenta = ( 255 , 0 , 255 ) red = ( 255 , 0 , 0 ) # fade from blue to magenta for n in range ( 0 , 256 , 1 ): led [ 0 ] = ( n , 0 , 255 ) time . sleep ( .05 ) # fade from magenta to red # (255, 0, 255) => (255, 0, 0) for n in range ( 255 , - 1 , - 1 ): led [ 0 ] = ( 255 , 0 , n ) time . sleep ( .1 )","title":"Code Snippets from the Presentation"},{"location":"exercises/007-stepping-between-values/#try-it","text":"Based on what we covered in the slides, demonstrate the ability to fade between colors.","title":"Try It"},{"location":"exercises/007-stepping-between-values/#show-me-your-code-in-action","text":"5 points: Your RGB LED fades smoothly from red => green => blue => red or a pattern of similar difficulty 4.5 points: Your RGB LED fades smoothly between at least two different sets of colors 4 points: Your RGB LED is able to fade smoothly at least once 3 points: You can change colors in multiple steps, but it is not coded in a way that makes sense","title":"Show me your code in action"},{"location":"exercises/008-digital-inputs/","text":"Exercise 8 - Digital Inputs Goals Enhance understanding of the digtialio library Create and use digital inputs Work with additional electronic components Preparation We're going to start out with the circuit simulator where wiring will be easier, and then we'll go back to physical circuits Go to Wokwi and create a new CircuitPython project by clicking the + More Options button, then choosing CircuitPython on Raspberry Pi Pico Find the + button and add a pushbutton to your circuit. It should like something like the circuit below Concepts & Vocabulary Digital Input Object Class Pull up resistor Input Signal Wiring Explanation of the switch The pushbutton switch has four legs, but that's a little misleading. There's really only a pair of wires, with a gap between them. If you look at the way the legs look like they follow through the board, you can see which ones are actually connected. One of the nice things about using the simulator is that you can hover over the pins to get a hint of what they are. The wires on the pushbutton are labeled as btn1:1.l & btn1:1.r (these are connected) and btn1:2.l & btn1:2.r (these are connected). When the button is pushed down, a metal plate connects the two wires to close the circuit. You can also use diagram.json to change the name of the switch to something other than btn1 if you want (see the image below) Connecting to the board You can create wires by clicking on one component, then clicking on the second component to make the connection. Connect one leg of the button to GND 8 on the board, and connect one of the legs not connected to that leg to GP28 on the board. If you're feeling adventurous, you can also add an LED and connect the anode (says A when hovered over) to an I/O pin (I used GP0), and connect the cathode to a ground pin. Demo Code This assumes you have a button hooked up to Ground and GP28. Please note that the name of the pin is different from what you would use on the physical boards Demo Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 import board , time # We're only imporing a subset of the digitalio module # This means we don't have access to the rest of it # The good thing is that we can use these three objects from digitalio without putting 'digitalio' before them from digitalio import DigitalInOut , Direction , Pull # Create a digitalio object like we did with LED # This one is called button because... it's a button button = DigitalInOut ( board . GP28 ) # Before we used Direction.OUTPUT so we could send a signal # Now we're using Direction.INPUT so we can read a signal coming in button . direction = Direction . INPUT # This creates a voltage difference when the other leg is connected to ground button . pull = Pull . UP # Can you set up the LED to be able to control it? # You don't need to import anything new # The legs of the LED are already hooked up to pin 0 (board.GP0) and ground while True : # because the button is an input, we can't assign it a value like we did for the LED # we can read the value it's getting from the outside world though print ( button . value ) # can you use button.value to control an LED? Code snippets from the presentation 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import board , time from digitalio import DigitalInOut , Direction , Pull button = DigitalInOut ( board . GP28 ) button . direction = Direction . INPUT button . pull = Pull . UP led = DigitalInOut ( board . GP0 ) led . direction = Direction . OUTPUT while True : print ( button . value ) led . value = # where can we get a True or False value to assign to the LED? 1 2 3 4 5 6 7 8 ############ assume setup already happened #############(1) ######## and you have a digitalio called button ######## # when button is not pushed, button.value is True if button . value == True : #(2) print ( \"The button is not pushed\" ) else : #(3) print ( \"The button is pushed\" ) This is not the full code! There is setup that would have to happen above this. You'd also probably want the if/else section running inside of a loop This line will check if the value of button.value is True. If it is, the line(s) indented below it will run If the if statement runs, this is skipped. If it doesn't run, then the line(s) intended below it will run Try It Based on what we covered in class, demonstrate that you can use a button to control an LED Show me your code in action 5 points: You successfully control an LED with a button. This should be based on programming, not directly hooking the LED up to the button 4 points: You can successfully read values from a button Anything less than reading values from a button will not be considered successful completion of this exercise","title":"008 - Digital Inputs"},{"location":"exercises/008-digital-inputs/#exercise-8-digital-inputs","text":"","title":"Exercise 8 - Digital Inputs"},{"location":"exercises/008-digital-inputs/#goals","text":"Enhance understanding of the digtialio library Create and use digital inputs Work with additional electronic components","title":"Goals"},{"location":"exercises/008-digital-inputs/#preparation","text":"We're going to start out with the circuit simulator where wiring will be easier, and then we'll go back to physical circuits Go to Wokwi and create a new CircuitPython project by clicking the + More Options button, then choosing CircuitPython on Raspberry Pi Pico Find the + button and add a pushbutton to your circuit. It should like something like the circuit below","title":"Preparation"},{"location":"exercises/008-digital-inputs/#concepts-vocabulary","text":"Digital Input Object Class Pull up resistor Input Signal","title":"Concepts &amp; Vocabulary"},{"location":"exercises/008-digital-inputs/#wiring","text":"","title":"Wiring"},{"location":"exercises/008-digital-inputs/#explanation-of-the-switch","text":"The pushbutton switch has four legs, but that's a little misleading. There's really only a pair of wires, with a gap between them. If you look at the way the legs look like they follow through the board, you can see which ones are actually connected. One of the nice things about using the simulator is that you can hover over the pins to get a hint of what they are. The wires on the pushbutton are labeled as btn1:1.l & btn1:1.r (these are connected) and btn1:2.l & btn1:2.r (these are connected). When the button is pushed down, a metal plate connects the two wires to close the circuit. You can also use diagram.json to change the name of the switch to something other than btn1 if you want (see the image below)","title":"Explanation of the switch"},{"location":"exercises/008-digital-inputs/#connecting-to-the-board","text":"You can create wires by clicking on one component, then clicking on the second component to make the connection. Connect one leg of the button to GND 8 on the board, and connect one of the legs not connected to that leg to GP28 on the board. If you're feeling adventurous, you can also add an LED and connect the anode (says A when hovered over) to an I/O pin (I used GP0), and connect the cathode to a ground pin.","title":"Connecting to the board"},{"location":"exercises/008-digital-inputs/#demo-code","text":"This assumes you have a button hooked up to Ground and GP28. Please note that the name of the pin is different from what you would use on the physical boards Demo Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 import board , time # We're only imporing a subset of the digitalio module # This means we don't have access to the rest of it # The good thing is that we can use these three objects from digitalio without putting 'digitalio' before them from digitalio import DigitalInOut , Direction , Pull # Create a digitalio object like we did with LED # This one is called button because... it's a button button = DigitalInOut ( board . GP28 ) # Before we used Direction.OUTPUT so we could send a signal # Now we're using Direction.INPUT so we can read a signal coming in button . direction = Direction . INPUT # This creates a voltage difference when the other leg is connected to ground button . pull = Pull . UP # Can you set up the LED to be able to control it? # You don't need to import anything new # The legs of the LED are already hooked up to pin 0 (board.GP0) and ground while True : # because the button is an input, we can't assign it a value like we did for the LED # we can read the value it's getting from the outside world though print ( button . value ) # can you use button.value to control an LED?","title":"Demo Code"},{"location":"exercises/008-digital-inputs/#code-snippets-from-the-presentation","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import board , time from digitalio import DigitalInOut , Direction , Pull button = DigitalInOut ( board . GP28 ) button . direction = Direction . INPUT button . pull = Pull . UP led = DigitalInOut ( board . GP0 ) led . direction = Direction . OUTPUT while True : print ( button . value ) led . value = # where can we get a True or False value to assign to the LED? 1 2 3 4 5 6 7 8 ############ assume setup already happened #############(1) ######## and you have a digitalio called button ######## # when button is not pushed, button.value is True if button . value == True : #(2) print ( \"The button is not pushed\" ) else : #(3) print ( \"The button is pushed\" ) This is not the full code! There is setup that would have to happen above this. You'd also probably want the if/else section running inside of a loop This line will check if the value of button.value is True. If it is, the line(s) indented below it will run If the if statement runs, this is skipped. If it doesn't run, then the line(s) intended below it will run","title":"Code snippets from the presentation"},{"location":"exercises/008-digital-inputs/#try-it","text":"Based on what we covered in class, demonstrate that you can use a button to control an LED","title":"Try It"},{"location":"exercises/008-digital-inputs/#show-me-your-code-in-action","text":"5 points: You successfully control an LED with a button. This should be based on programming, not directly hooking the LED up to the button 4 points: You can successfully read values from a button Anything less than reading values from a button will not be considered successful completion of this exercise","title":"Show me your code in action"},{"location":"exercises/009-conditional-statements/","text":"Exercise 9 - Conditional Statements Goals Write and modify conditional statements Use conditional statements to create branching logic Preparation You may work with the circuit simulator or a physical circuit Go to Wokwi and create a new CircuitPython project by clicking the + More Options button, then choosing CircuitPython on Raspberry Pi Pico Find the + button and add a pushbutton to your circuit. It should like something like the circuit below Concepts & Vocabulary Conditional statement if elif else logical test /test condition Explanation - Conditional Statements A conditional statement allows your code to make decisions. If statement An if statement is the simplest version of a conditional statement: 1 *if* the test condition is true, *then* do something In code: 1 2 3 4 5 6 7 8 9 10 print ( \"This happens before both the loop and the conditional statement\" ) # loop through every number from 0 - 9 for n in range ( 10 ): # print the number. This is outside the conditional statement, so it happens every time print ( n ) # if the number is less than 5, also print \"That's a small number!\" if n < 5 : print ( \"That's a small number!\" ) print ( \"We've exited the loop\" ) Limitations of the if statement An if statement will run if a condition is true. If that condition is not true, nothing happens. But sometimes, that's not what you want. For instance, imagine if you were deciding what to eat for lunch. 1 *if* there is pizza available, *then* eat the pizza In this example, you probably still want to eat something for lunch. Alternatively, you might look at this as: 1 *if* the button is pushed, *then* turn on the LED The problem there is that if there isn't pizza, you just don't eat anything. If the button isn't pushed, the LED still stays on once you've turned it on. Sometimes, you can fix this by creating if statements for every possible condition. 1 2 *if* the button is pushed, *then* turn on the LED *if* the button isn't pushed, *then* turn of the LED This works pretty well if you have a well defined set of possibilities like the button, which can only be in one of two states. There's a couple of problems with this option, though: We have to check every if statement, which slows down the code We have to identify every possibility, which isn't always an option (do you really want to list out every food you might eat for lunch?) Sometimes it might be important to stop checking after you find a true option. Consider the following example: 1 2 3 4 5 6 7 8 9 10 11 12 student_score = 68 if student_score >= 90 : print ( \"you earned an A\" ) if student_score >= 80 : print ( \"you earned a B\" ) if student_score >= 70 : print ( \"you earned a C\" ) if student_score >= 65 : print ( \"you earned a D\" ) if student_score < 65 : print ( \"you failed :( \" ) What will print if student_score is 68 as shown above? What if you change it to 75? How about 85? Or 95? If you're not sure, try running the code! It won't do anything to your LED, but it will run just fine and will print to the serial monitor. We'll come back to this example in a little while. Else Statement You can chain if and else together to create a more advanced conditional statement. 1 2 3 4 5 6 7 8 *if* the condition is true, *then* do something *otherwise* do something else *if* there is pizza available, eat a slice of pizza *otherwise* eat the tastiest available lunch *if* the button is pushed, *then* turn on the LED *otherwise* turn off the LED The way this works is that if the conditional test for the if statement is true, the indented code under if will run, and the computer will skip else . If the test isn't true, the if statement is skipped and the indented code under else will run. If you want to see this in action, make sure you've got a button set up correctly and try the code below: 1 2 3 4 5 6 # skipped setup code for brevity ################################ if button . value : print ( \"the button is returning True\" ) else : print ( \"the button is not returning True\" ) Elif Statement So now you can do if and else , but what if you have more than one thing to check for, like the grades example above? That's where the elif statement comes in. You'll always have exactly one if statement in a chain. You can have at most one else . But you can have as many or as few elif statements as you want. An elif statement is an if statement that will only be checked if the statement before it in the chain doesn't run. For example, we can fix the grades example using elif and else : 1 2 3 4 5 6 7 8 9 10 11 12 student_score = 68 if student_score >= 90 : print ( \"you earned an A\" ) elif student_score >= 80 : print ( \"you earned a B\" ) elif student_score >= 70 : print ( \"you earned a C\" ) elif student_score >= 65 : print ( \"you earned a D\" ) else : print ( \"you failed :( \" ) In this version, as soon as one of those statements is True, we'll print out what score the student earned, and then exit. If none were true, the student failed so that's the message we print. Try It Based on what we covered in class and what's reviewed in this document, demonstrate that you can use a button and a conditional statement to control an LED Show me your code in action 5 points: You successfully control an LED with a button using both if and else . This should be based on programming, not directly hooking the LED up to the button 4 points: You can successfully control the LED using at least an if statement 3 points: You can do something with a conditional statement Anything less will not be considered successful completion","title":"009 - Conditional Statements"},{"location":"exercises/009-conditional-statements/#exercise-9-conditional-statements","text":"","title":"Exercise 9 - Conditional Statements"},{"location":"exercises/009-conditional-statements/#goals","text":"Write and modify conditional statements Use conditional statements to create branching logic","title":"Goals"},{"location":"exercises/009-conditional-statements/#preparation","text":"You may work with the circuit simulator or a physical circuit Go to Wokwi and create a new CircuitPython project by clicking the + More Options button, then choosing CircuitPython on Raspberry Pi Pico Find the + button and add a pushbutton to your circuit. It should like something like the circuit below","title":"Preparation"},{"location":"exercises/009-conditional-statements/#concepts-vocabulary","text":"Conditional statement if elif else logical test /test condition","title":"Concepts &amp; Vocabulary"},{"location":"exercises/009-conditional-statements/#explanation-conditional-statements","text":"A conditional statement allows your code to make decisions.","title":"Explanation - Conditional Statements"},{"location":"exercises/009-conditional-statements/#if-statement","text":"An if statement is the simplest version of a conditional statement: 1 *if* the test condition is true, *then* do something In code: 1 2 3 4 5 6 7 8 9 10 print ( \"This happens before both the loop and the conditional statement\" ) # loop through every number from 0 - 9 for n in range ( 10 ): # print the number. This is outside the conditional statement, so it happens every time print ( n ) # if the number is less than 5, also print \"That's a small number!\" if n < 5 : print ( \"That's a small number!\" ) print ( \"We've exited the loop\" )","title":"If statement"},{"location":"exercises/009-conditional-statements/#limitations-of-the-if-statement","text":"An if statement will run if a condition is true. If that condition is not true, nothing happens. But sometimes, that's not what you want. For instance, imagine if you were deciding what to eat for lunch. 1 *if* there is pizza available, *then* eat the pizza In this example, you probably still want to eat something for lunch. Alternatively, you might look at this as: 1 *if* the button is pushed, *then* turn on the LED The problem there is that if there isn't pizza, you just don't eat anything. If the button isn't pushed, the LED still stays on once you've turned it on. Sometimes, you can fix this by creating if statements for every possible condition. 1 2 *if* the button is pushed, *then* turn on the LED *if* the button isn't pushed, *then* turn of the LED This works pretty well if you have a well defined set of possibilities like the button, which can only be in one of two states. There's a couple of problems with this option, though: We have to check every if statement, which slows down the code We have to identify every possibility, which isn't always an option (do you really want to list out every food you might eat for lunch?) Sometimes it might be important to stop checking after you find a true option. Consider the following example: 1 2 3 4 5 6 7 8 9 10 11 12 student_score = 68 if student_score >= 90 : print ( \"you earned an A\" ) if student_score >= 80 : print ( \"you earned a B\" ) if student_score >= 70 : print ( \"you earned a C\" ) if student_score >= 65 : print ( \"you earned a D\" ) if student_score < 65 : print ( \"you failed :( \" ) What will print if student_score is 68 as shown above? What if you change it to 75? How about 85? Or 95? If you're not sure, try running the code! It won't do anything to your LED, but it will run just fine and will print to the serial monitor. We'll come back to this example in a little while.","title":"Limitations of the if statement"},{"location":"exercises/009-conditional-statements/#else-statement","text":"You can chain if and else together to create a more advanced conditional statement. 1 2 3 4 5 6 7 8 *if* the condition is true, *then* do something *otherwise* do something else *if* there is pizza available, eat a slice of pizza *otherwise* eat the tastiest available lunch *if* the button is pushed, *then* turn on the LED *otherwise* turn off the LED The way this works is that if the conditional test for the if statement is true, the indented code under if will run, and the computer will skip else . If the test isn't true, the if statement is skipped and the indented code under else will run. If you want to see this in action, make sure you've got a button set up correctly and try the code below: 1 2 3 4 5 6 # skipped setup code for brevity ################################ if button . value : print ( \"the button is returning True\" ) else : print ( \"the button is not returning True\" )","title":"Else Statement"},{"location":"exercises/009-conditional-statements/#elif-statement","text":"So now you can do if and else , but what if you have more than one thing to check for, like the grades example above? That's where the elif statement comes in. You'll always have exactly one if statement in a chain. You can have at most one else . But you can have as many or as few elif statements as you want. An elif statement is an if statement that will only be checked if the statement before it in the chain doesn't run. For example, we can fix the grades example using elif and else : 1 2 3 4 5 6 7 8 9 10 11 12 student_score = 68 if student_score >= 90 : print ( \"you earned an A\" ) elif student_score >= 80 : print ( \"you earned a B\" ) elif student_score >= 70 : print ( \"you earned a C\" ) elif student_score >= 65 : print ( \"you earned a D\" ) else : print ( \"you failed :( \" ) In this version, as soon as one of those statements is True, we'll print out what score the student earned, and then exit. If none were true, the student failed so that's the message we print.","title":"Elif Statement"},{"location":"exercises/009-conditional-statements/#try-it","text":"Based on what we covered in class and what's reviewed in this document, demonstrate that you can use a button and a conditional statement to control an LED","title":"Try It"},{"location":"exercises/009-conditional-statements/#show-me-your-code-in-action","text":"5 points: You successfully control an LED with a button using both if and else . This should be based on programming, not directly hooking the LED up to the button 4 points: You can successfully control the LED using at least an if statement 3 points: You can do something with a conditional statement Anything less will not be considered successful completion","title":"Show me your code in action"},{"location":"exercises/010-more-conditionals/","text":"Exercise 10 - More Conditional Statements Goals Write and modify conditional statements Use conditional statements to create branching logic Preparation You may work with the circuit simulator or a physical circuit Go to Wokwi and create a new CircuitPython project by clicking the + More Options button, then choosing CircuitPython on Raspberry Pi Pico Find the + button and add a pushbutton to your circuit. It should like something like the circuit below Concepts & Vocabulary Conditional statement if elif else logical test /test condition Review - Conditional Statements If An if statement can be used on its own. if the condition is true, then do something if the class is being particularly good, then give each student a brownie if you are cold, then put on a jacket if the button is pressed, then turn on the LED The if statement will do something if the test is true, but will be skipped without any effect if the test is not true If/Else An else can be used in combination with an if , but never on its own. You can never have more than one else to go with an if if the condition is true, then do something otherwise , do something else if the class is being particularly good, then give each student a brownie otherwise , start today's lesson if you are cold, then put on a jacket otherwise , go swimming if the button is pressed, then turn on the LED otherwise , turn off the LED If/Elif/Else The if / else combo above is great if you're checking for something that only has two possible outcomes, either because what you're testing (for instance whether a pushbutton is pressed down) only has two possibilities, or because you're going to have some sort of default, where you do something specific in one circiumstance, and a more generic response in some other circumstance. Sometimes, you need more than two possible outcomes, though, so that's where elif (short for else if ) comes in. Look at the following example: if you are cold, then put on a jacket otherwise , go swimming I'm sure you can imagine plenty of possibilities where you wouldn't need to put on a jacket, but also wouldn't want to go swimming. We can rewrite this to be a little more reasonable: if you are cold, then put on a jacket otherwise if you are overheated, then put on a swimsuit and go swimming otherwise relax and hang out with your friends In code: 1 2 3 4 5 6 7 8 n = random . random () if n < .5 : print ( \"small!\" ) elif n == .5 : print ( \"right in the middle!\" ) else : print ( \"large!\" ) Try It Use one or more buttons to configure settings in your code, rather than directly controlling the button Examples: Challenging: Use a Neopixel and have a list of colors. Each time you push the button, you cycle through the colors for the Neopixel Challenging: Use two buttons to increase or decrease the blink rate of the LED Moderate: Use a button to determine whether or not the LED blinks Easy: While a button is pressed, increase the blink rate of the LED Show me your code in action 5 points: successful completion of a challenging example less than 5 points: successful completion of a less challenging example","title":"010 - More Conditional Statements"},{"location":"exercises/010-more-conditionals/#exercise-10-more-conditional-statements","text":"","title":"Exercise 10 - More Conditional Statements"},{"location":"exercises/010-more-conditionals/#goals","text":"Write and modify conditional statements Use conditional statements to create branching logic","title":"Goals"},{"location":"exercises/010-more-conditionals/#preparation","text":"You may work with the circuit simulator or a physical circuit Go to Wokwi and create a new CircuitPython project by clicking the + More Options button, then choosing CircuitPython on Raspberry Pi Pico Find the + button and add a pushbutton to your circuit. It should like something like the circuit below","title":"Preparation"},{"location":"exercises/010-more-conditionals/#concepts-vocabulary","text":"Conditional statement if elif else logical test /test condition","title":"Concepts &amp; Vocabulary"},{"location":"exercises/010-more-conditionals/#review-conditional-statements","text":"","title":"Review - Conditional Statements"},{"location":"exercises/010-more-conditionals/#if","text":"An if statement can be used on its own. if the condition is true, then do something if the class is being particularly good, then give each student a brownie if you are cold, then put on a jacket if the button is pressed, then turn on the LED The if statement will do something if the test is true, but will be skipped without any effect if the test is not true","title":"If"},{"location":"exercises/010-more-conditionals/#ifelse","text":"An else can be used in combination with an if , but never on its own. You can never have more than one else to go with an if if the condition is true, then do something otherwise , do something else if the class is being particularly good, then give each student a brownie otherwise , start today's lesson if you are cold, then put on a jacket otherwise , go swimming if the button is pressed, then turn on the LED otherwise , turn off the LED","title":"If/Else"},{"location":"exercises/010-more-conditionals/#ifelifelse","text":"The if / else combo above is great if you're checking for something that only has two possible outcomes, either because what you're testing (for instance whether a pushbutton is pressed down) only has two possibilities, or because you're going to have some sort of default, where you do something specific in one circiumstance, and a more generic response in some other circumstance. Sometimes, you need more than two possible outcomes, though, so that's where elif (short for else if ) comes in. Look at the following example: if you are cold, then put on a jacket otherwise , go swimming I'm sure you can imagine plenty of possibilities where you wouldn't need to put on a jacket, but also wouldn't want to go swimming. We can rewrite this to be a little more reasonable: if you are cold, then put on a jacket otherwise if you are overheated, then put on a swimsuit and go swimming otherwise relax and hang out with your friends","title":"If/Elif/Else"},{"location":"exercises/010-more-conditionals/#in-code","text":"1 2 3 4 5 6 7 8 n = random . random () if n < .5 : print ( \"small!\" ) elif n == .5 : print ( \"right in the middle!\" ) else : print ( \"large!\" )","title":"In code:"},{"location":"exercises/010-more-conditionals/#try-it","text":"Use one or more buttons to configure settings in your code, rather than directly controlling the button Examples: Challenging: Use a Neopixel and have a list of colors. Each time you push the button, you cycle through the colors for the Neopixel Challenging: Use two buttons to increase or decrease the blink rate of the LED Moderate: Use a button to determine whether or not the LED blinks Easy: While a button is pressed, increase the blink rate of the LED","title":"Try It"},{"location":"exercises/010-more-conditionals/#show-me-your-code-in-action","text":"5 points: successful completion of a challenging example less than 5 points: successful completion of a less challenging example","title":"Show me your code in action"},{"location":"quickref/control-structures/","text":"Control Structures Normally, lines of code run in order, but you can change the way the computer moves through your code. This section will focus on conditional statements (if/elif/else) and loops (for and while) Conditional Statements If If-Else If-Elif-Else Loops Loops cause code to run repeatedly While Loops While loops run code as long as the condition described in the logical test is true. Real World Examples - Breathe. Repeat for the rest of your life. - While you are hungry, eat - While an unauthorized person is in your supervillain lair, fire lasers at them For Loops For loops will iterate through a set of items, such as a list of names, a range of numbers, or the contents of a folder. Real World Examples - Print all the items in a player's inventory (for each item in the inventory, print the item's name) - Give each student in the class a cupcake (for each student, give them a cupcake) -","title":"Control Structures"},{"location":"quickref/control-structures/#control-structures","text":"Normally, lines of code run in order, but you can change the way the computer moves through your code. This section will focus on conditional statements (if/elif/else) and loops (for and while)","title":"Control Structures"},{"location":"quickref/control-structures/#conditional-statements","text":"","title":"Conditional Statements"},{"location":"quickref/control-structures/#if","text":"","title":"If"},{"location":"quickref/control-structures/#if-else","text":"","title":"If-Else"},{"location":"quickref/control-structures/#if-elif-else","text":"","title":"If-Elif-Else"},{"location":"quickref/control-structures/#loops","text":"Loops cause code to run repeatedly","title":"Loops"},{"location":"quickref/control-structures/#while-loops","text":"While loops run code as long as the condition described in the logical test is true. Real World Examples - Breathe. Repeat for the rest of your life. - While you are hungry, eat - While an unauthorized person is in your supervillain lair, fire lasers at them","title":"While Loops"},{"location":"quickref/control-structures/#for-loops","text":"For loops will iterate through a set of items, such as a list of names, a range of numbers, or the contents of a folder. Real World Examples - Print all the items in a player's inventory (for each item in the inventory, print the item's name) - Give each student in the class a cupcake (for each student, give them a cupcake) -","title":"For Loops"},{"location":"quickref/data-and-variables/","text":"Data and Variables coming soon","title":"Data Types and Variables"},{"location":"quickref/data-and-variables/#data-and-variables","text":"coming soon","title":"Data and Variables"}]}